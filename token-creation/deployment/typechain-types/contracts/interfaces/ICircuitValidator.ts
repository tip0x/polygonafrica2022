/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ICircuitValidator {
  export type CircuitQueryStruct = {
    schema: PromiseOrValue<BigNumberish>;
    slotIndex: PromiseOrValue<BigNumberish>;
    operator: PromiseOrValue<BigNumberish>;
    value: PromiseOrValue<BigNumberish>[];
    circuitId: PromiseOrValue<string>;
  };

  export type CircuitQueryStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber[],
    string
  ] & {
    schema: BigNumber;
    slotIndex: BigNumber;
    operator: BigNumber;
    value: BigNumber[];
    circuitId: string;
  };
}

export interface ICircuitValidatorInterface extends utils.Interface {
  functions: {
    "getChallengeInputIndex()": FunctionFragment;
    "getCircuitId()": FunctionFragment;
    "getUserIdInputIndex()": FunctionFragment;
    "verify(uint256[],uint256[2],uint256[2][2],uint256[2],(uint256,uint256,uint256,uint256[],string))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getChallengeInputIndex"
      | "getCircuitId"
      | "getUserIdInputIndex"
      | "verify"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getChallengeInputIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCircuitId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserIdInputIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [
      PromiseOrValue<BigNumberish>[],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      ICircuitValidator.CircuitQueryStruct
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getChallengeInputIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCircuitId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserIdInputIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;

  events: {};
}

export interface ICircuitValidator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ICircuitValidatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getChallengeInputIndex(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { index: BigNumber }>;

    getCircuitId(overrides?: CallOverrides): Promise<[string] & { id: string }>;

    getUserIdInputIndex(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { index: BigNumber }>;

    verify(
      inputs: PromiseOrValue<BigNumberish>[],
      a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      query: ICircuitValidator.CircuitQueryStruct,
      overrides?: CallOverrides
    ): Promise<[boolean] & { r: boolean }>;
  };

  getChallengeInputIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getCircuitId(overrides?: CallOverrides): Promise<string>;

  getUserIdInputIndex(overrides?: CallOverrides): Promise<BigNumber>;

  verify(
    inputs: PromiseOrValue<BigNumberish>[],
    a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    b: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ],
    c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    query: ICircuitValidator.CircuitQueryStruct,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    getChallengeInputIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getCircuitId(overrides?: CallOverrides): Promise<string>;

    getUserIdInputIndex(overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      inputs: PromiseOrValue<BigNumberish>[],
      a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      query: ICircuitValidator.CircuitQueryStruct,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getChallengeInputIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getCircuitId(overrides?: CallOverrides): Promise<BigNumber>;

    getUserIdInputIndex(overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      inputs: PromiseOrValue<BigNumberish>[],
      a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      query: ICircuitValidator.CircuitQueryStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getChallengeInputIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCircuitId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserIdInputIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      inputs: PromiseOrValue<BigNumberish>[],
      a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      b: [
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
        [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
      ],
      c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      query: ICircuitValidator.CircuitQueryStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}

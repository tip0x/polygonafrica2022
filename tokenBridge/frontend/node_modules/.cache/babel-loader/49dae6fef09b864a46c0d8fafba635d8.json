{"ast":null,"code":"var _jsxFileName = \"/home/tiptape/relearningculture/zkevm/frontend/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Navbar from \"./Navbar\";\nimport WalletConnectProvider from \"@maticnetwork/walletconnect-provider\";\nconst config = require(\"./config.js\");\nconst MaticPoSClient = require(\"@maticnetwork/maticjs\").MaticPOSClient;\nconst App = () => {\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n  let content;\n  const [Networkid, setNetworkid] = useState(0);\n  const [account, setAccount] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [inputValue] = useState(\"\");\n  const [burnHash, setBurnHash] = useState(\"\");\n  const [zkevmProvider, setZKevmProvider] = useState();\n  const [mumbaiProvider, setMumbaiProvider] = useState();\n  const [bridgeOptions] = useState([{\n    label: \"Proof of Stake\",\n    value: \"Proof of Stake\"\n  }]);\n  const [tokenTypes, setTokenTypes] = useState([{\n    label: \"ERC20\",\n    value: \"ERC20\"\n  }]);\n  const [selectedBridgeOption, setSelectedBridgeOption] = useState({\n    label: \"Proof of Stake\"\n  });\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  };\n  const loadBlockchainData = async () => {\n    setLoading(true);\n    const zkevmProvider = new WalletConnectProvider({\n      host: config.ZKEVM_RPC,\n      callbacks: {\n        onConnect: console.log(\"zkevm connected\"),\n        onDisconnect: console.log(\"zkevm disconnected!\")\n      }\n    });\n    const mumbaiProvider = new WalletConnectProvider({\n      host: config.MUMBAI_RPC,\n      callbacks: {\n        onConnect: console.log(\"mumbai connected\"),\n        onDisconnect: console.log(\"mumbai disconnected\")\n      }\n    });\n    setZKevmProvider(zkevmProvider);\n    setMumbaiProvider(mumbaiProvider);\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n    const networkId = await web3.eth.net.getId();\n    setNetworkid(networkId);\n    if (networkId === config.MUMBAI_CHAINID) {\n      setLoading(false);\n    } else if (networkId === config.ZKEVM_CHAINID) {\n      setLoading(false);\n    } else {\n      window.alert(\" switch to Polygon Mumbai or zkEVM network\");\n    }\n  };\n  // posClientGeneral facilitates the operations like approve, deposit, exit\n  const posClientParent = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: zkevmProvider,\n      parentProvider: window.web3,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    return maticPoSClient;\n  };\n  // posclientBurn facilitates the burning of tokens on the matic chain\n  const posClientChild = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: window.web3,\n      parentProvider: mumbaiProvider,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    return maticPoSClient;\n  };\n\n  // POS ERC20 functionality\n\n  const depositERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await maticPoSClient.approveERC20ForDeposit(config.posRootERC20, x1, {\n      from: account\n    });\n    await maticPoSClient.depositERC20ForUser(config.posRootERC20, account, x1, {\n      from: account\n    });\n  };\n  const burnERC20 = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient.burnERC20(config.posChildERC20, x1, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n    });\n  };\n  const exitERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient.exitERC20(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"exit o/p\", res);\n    });\n  };\n  if (loading === true) {} else {\n    content = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"POS\",\n      hidden: selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      id: \"pos-inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 13\n      }\n    }, burnHash)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ERC20\",\n      hidden: selectedToken.label === \"ERC20\" && selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositERC20,\n      disabled: Networkid !== 0 && Networkid === config.ZKEVM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnERC20,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitERC20,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }\n    }, \"exit\")));\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    account: account,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => {\n      setSelectedBridgeOption({\n        label: e.target.value\n      });\n      if (e.target.value === \"POS\") {\n        setTokenTypes([{\n          label: \"ERC20\",\n          value: \"ERC20\"\n        }]);\n      } else {\n        setTokenTypes([{\n          label: \"ERC20\",\n          value: \"ERC20\"\n        }]);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 9\n    }\n  }, bridgeOptions.map(item => /*#__PURE__*/React.createElement(\"option\", {\n    key: item.value,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 13\n    }\n  }, item.label)))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => setSelectedToken({\n      label: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 9\n    }\n  }, tokenTypes.map(item => /*#__PURE__*/React.createElement(\"option\", {\n    key: item.value,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 13\n    }\n  }, item.label)))), content);\n};\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","Web3","Navbar","WalletConnectProvider","config","require","MaticPoSClient","MaticPOSClient","App","loadWeb3","loadBlockchainData","content","Networkid","setNetworkid","account","setAccount","loading","setLoading","inputValue","burnHash","setBurnHash","zkevmProvider","setZKevmProvider","mumbaiProvider","setMumbaiProvider","bridgeOptions","label","value","tokenTypes","setTokenTypes","selectedBridgeOption","setSelectedBridgeOption","window","ethereum","web3","enable","currentProvider","alert","host","ZKEVM_RPC","callbacks","onConnect","console","log","onDisconnect","MUMBAI_RPC","accounts","eth","getAccounts","networkId","net","getId","MUMBAI_CHAINID","ZKEVM_CHAINID","posClientParent","maticPoSClient","network","NETWORK","version","VERSION","maticProvider","parentProvider","parentDefaultOptions","from","maticDefaultOptions","posClientChild","depositERC20","x","x1","toString","approveERC20ForDeposit","posRootERC20","depositERC20ForUser","burnERC20","posChildERC20","then","res","transactionHash","exitERC20","onchange","selectedToken","e","target","map","item","setSelectedToken"],"sources":["/home/tiptape/relearningculture/zkevm/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Navbar from \"./Navbar\";\nimport WalletConnectProvider from \"@maticnetwork/walletconnect-provider\";\nconst config = require(\"./config.js\");\nconst MaticPoSClient = require(\"@maticnetwork/maticjs\").MaticPOSClient;\n\nconst App = () => {\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n  let content;\n  const [Networkid, setNetworkid] = useState(0);\n  const [account, setAccount] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [inputValue] = useState(\"\");\n  const [burnHash, setBurnHash] = useState(\"\");\n  const [zkevmProvider, setZKevmProvider] = useState();\n  const [mumbaiProvider, setMumbaiProvider] = useState();\n  const [bridgeOptions] = useState([\n    {\n      label: \"Proof of Stake\",\n      value: \"Proof of Stake\",\n    },\n\n  ]);\n  const [tokenTypes, setTokenTypes] = useState([\n    {\n      label: \"ERC20\",\n      value: \"ERC20\",\n    },\n\n  ]);\n  const [selectedBridgeOption, setSelectedBridgeOption] = useState({\n    label: \"Proof of Stake\",\n  });\n\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    setLoading(true);\n    const zkevmProvider = new WalletConnectProvider({\n      host: config.ZKEVM_RPC,\n      callbacks: {\n        onConnect: console.log(\"zkevm connected\"),\n        onDisconnect: console.log(\"zkevm disconnected!\"),\n      },\n    });\n\n    const mumbaiProvider = new WalletConnectProvider({\n      host: config.MUMBAI_RPC,\n      callbacks: {\n        onConnect: console.log(\"mumbai connected\"),\n        onDisconnect: console.log(\"mumbai disconnected\"),\n      },\n    });\n\n    setZKevmProvider(zkevmProvider);\n    setMumbaiProvider(mumbaiProvider);\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n    const networkId = await web3.eth.net.getId();\n\n    setNetworkid(networkId);\n\n    if (networkId === config.MUMBAI_CHAINID) {\n      setLoading(false);\n    } else if (networkId === config.ZKEVM_CHAINID) {\n      setLoading(false);\n    } else {\n      window.alert(\" switch to Polygon Mumbai or zkEVM network\");\n    }\n  };\n  // posClientGeneral facilitates the operations like approve, deposit, exit\n  const posClientParent = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: zkevmProvider,\n      parentProvider: window.web3,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    return maticPoSClient;\n  };\n  // posclientBurn facilitates the burning of tokens on the matic chain\n  const posClientChild = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: window.web3,\n      parentProvider: mumbaiProvider,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    return maticPoSClient;\n  };\n\n  // POS ERC20 functionality\n\n  const depositERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await maticPoSClient.approveERC20ForDeposit(config.posRootERC20, x1, {\n      from: account,\n    });\n    await maticPoSClient.depositERC20ForUser(config.posRootERC20, account, x1, {\n      from: account,\n    });\n  };\n\n  const burnERC20 = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient\n      .burnERC20(config.posChildERC20, x1, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n      });\n  };\n\n  const exitERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient\n      .exitERC20(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"exit o/p\", res);\n      });\n  };\n\n  if (loading === true) {\n  } else {\n    content = (\n      <div>\n        <div\n          id=\"POS\"\n          hidden={\n            selectedBridgeOption.label === \"Proof of Stake\" ? false : true\n          }\n        >\n         \n            <input\n              id=\"pos-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"ERC20\"\n            hidden={\n              selectedToken.label === \"ERC20\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            \n          </div>\n        </div>\n  \n    );\n  }\n\n  return (\n    <div>\n      <Navbar account={account} />\n      <div>\n        <select\n          onChange={(e) => {\n            setSelectedBridgeOption({ label: e.target.value });\n            if (e.target.value === \"POS\") {\n              setTokenTypes([\n                {\n                  label: \"ERC20\",\n                  value: \"ERC20\",\n                },\n              ]);\n            } else {\n              setTokenTypes([\n                {\n                  label: \"ERC20\",\n                  value: \"ERC20\",\n                },\n              ]);\n            }\n          }}\n        >\n          {bridgeOptions.map((item) => (\n            <option key={item.value} value={item.value}>\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <select onChange={(e) => setSelectedToken({ label: e.target.value })}>\n          {tokenTypes.map((item) => (\n            <option key={item.value} value={item.value}>\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {content}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
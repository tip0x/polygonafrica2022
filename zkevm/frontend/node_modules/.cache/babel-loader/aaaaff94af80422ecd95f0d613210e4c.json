{"ast":null,"code":"const async = require('async');\nmodule.exports = {\n  matchingNibbleLength: matchingNibbleLength,\n  callTogether: callTogether,\n  asyncFirstSeries: asyncFirstSeries,\n  doKeysMatch: doKeysMatch\n};\n\n/**\n * Returns the number of in order matching nibbles of two give nibble arrayes\n * @method matchingNibbleLength\n * @param {Array} nib1\n * @param {Array} nib2\n */\nfunction matchingNibbleLength(nib1, nib2) {\n  var i = 0;\n  while (nib1[i] === nib2[i] && nib1.length > i) {\n    i++;\n  }\n  return i;\n}\n\n/**\n * Compare two 'nibble array' keys\n */\nfunction doKeysMatch(keyA, keyB) {\n  var length = matchingNibbleLength(keyA, keyB);\n  return length === keyA.length && length === keyB.length;\n}\n\n/**\n * Take two or more functions and returns a function  that will execute all of\n * the given functions\n */\nfunction callTogether() {\n  var funcs = arguments;\n  var length = funcs.length;\n  var index = length;\n  if (!length) {\n    return function () {};\n  }\n  return function () {\n    length = index;\n    while (length--) {\n      var fn = funcs[length];\n      if (typeof fn === 'function') {\n        var result = funcs[length].apply(this, arguments);\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Take a collection of async fns, call the cb on the first to return a truthy value.\n * If all run without a truthy result, return undefined\n */\nfunction asyncFirstSeries(array, iterator, cb) {\n  var didComplete = false;\n  async.eachSeries(array, function (item, next) {\n    if (didComplete) return next;\n    iterator(item, function (err, result) {\n      if (result) {\n        didComplete = true;\n        process.nextTick(cb.bind(null, null, result));\n      }\n      next(err);\n    });\n  }, function () {\n    if (!didComplete) {\n      cb();\n    }\n  });\n}","map":{"version":3,"names":["async","require","module","exports","matchingNibbleLength","callTogether","asyncFirstSeries","doKeysMatch","nib1","nib2","i","length","keyA","keyB","funcs","arguments","index","fn","result","apply","array","iterator","cb","didComplete","eachSeries","item","next","err","process","nextTick","bind"],"sources":["/home/tiptape/relearningculture/zkevm/frontend/node_modules/merkle-patricia-tree/util.js"],"sourcesContent":["const async = require('async')\n\nmodule.exports = {\n  matchingNibbleLength: matchingNibbleLength,\n  callTogether: callTogether,\n  asyncFirstSeries: asyncFirstSeries,\n  doKeysMatch: doKeysMatch\n}\n\n/**\n * Returns the number of in order matching nibbles of two give nibble arrayes\n * @method matchingNibbleLength\n * @param {Array} nib1\n * @param {Array} nib2\n */\nfunction matchingNibbleLength (nib1, nib2) {\n  var i = 0\n  while (nib1[i] === nib2[i] && nib1.length > i) {\n    i++\n  }\n  return i\n}\n\n/**\n * Compare two 'nibble array' keys\n */\nfunction doKeysMatch (keyA, keyB) {\n  var length = matchingNibbleLength(keyA, keyB)\n  return length === keyA.length && length === keyB.length\n}\n\n/**\n * Take two or more functions and returns a function  that will execute all of\n * the given functions\n */\nfunction callTogether () {\n  var funcs = arguments\n  var length = funcs.length\n  var index = length\n\n  if (!length) {\n    return function () {}\n  }\n\n  return function () {\n    length = index\n\n    while (length--) {\n      var fn = funcs[length]\n      if (typeof fn === 'function') {\n        var result = funcs[length].apply(this, arguments)\n      }\n    }\n    return result\n  }\n}\n\n/**\n * Take a collection of async fns, call the cb on the first to return a truthy value.\n * If all run without a truthy result, return undefined\n */\nfunction asyncFirstSeries (array, iterator, cb) {\n  var didComplete = false\n  async.eachSeries(array, function (item, next) {\n    if (didComplete) return next\n    iterator(item, function (err, result) {\n      if (result) {\n        didComplete = true\n        process.nextTick(cb.bind(null, null, result))\n      }\n      next(err)\n    })\n  }, function () {\n    if (!didComplete) {\n      cb()\n    }\n  })\n}\n"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAO,CAAC;AAE9BC,MAAM,CAACC,OAAO,GAAG;EACfC,oBAAoB,EAAEA,oBAAoB;EAC1CC,YAAY,EAAEA,YAAY;EAC1BC,gBAAgB,EAAEA,gBAAgB;EAClCC,WAAW,EAAEA;AACf,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASH,oBAAoB,CAAEI,IAAI,EAAEC,IAAI,EAAE;EACzC,IAAIC,CAAC,GAAG,CAAC;EACT,OAAOF,IAAI,CAACE,CAAC,CAAC,KAAKD,IAAI,CAACC,CAAC,CAAC,IAAIF,IAAI,CAACG,MAAM,GAAGD,CAAC,EAAE;IAC7CA,CAAC,EAAE;EACL;EACA,OAAOA,CAAC;AACV;;AAEA;AACA;AACA;AACA,SAASH,WAAW,CAAEK,IAAI,EAAEC,IAAI,EAAE;EAChC,IAAIF,MAAM,GAAGP,oBAAoB,CAACQ,IAAI,EAAEC,IAAI,CAAC;EAC7C,OAAOF,MAAM,KAAKC,IAAI,CAACD,MAAM,IAAIA,MAAM,KAAKE,IAAI,CAACF,MAAM;AACzD;;AAEA;AACA;AACA;AACA;AACA,SAASN,YAAY,GAAI;EACvB,IAAIS,KAAK,GAAGC,SAAS;EACrB,IAAIJ,MAAM,GAAGG,KAAK,CAACH,MAAM;EACzB,IAAIK,KAAK,GAAGL,MAAM;EAElB,IAAI,CAACA,MAAM,EAAE;IACX,OAAO,YAAY,CAAC,CAAC;EACvB;EAEA,OAAO,YAAY;IACjBA,MAAM,GAAGK,KAAK;IAEd,OAAOL,MAAM,EAAE,EAAE;MACf,IAAIM,EAAE,GAAGH,KAAK,CAACH,MAAM,CAAC;MACtB,IAAI,OAAOM,EAAE,KAAK,UAAU,EAAE;QAC5B,IAAIC,MAAM,GAAGJ,KAAK,CAACH,MAAM,CAAC,CAACQ,KAAK,CAAC,IAAI,EAAEJ,SAAS,CAAC;MACnD;IACF;IACA,OAAOG,MAAM;EACf,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA,SAASZ,gBAAgB,CAAEc,KAAK,EAAEC,QAAQ,EAAEC,EAAE,EAAE;EAC9C,IAAIC,WAAW,GAAG,KAAK;EACvBvB,KAAK,CAACwB,UAAU,CAACJ,KAAK,EAAE,UAAUK,IAAI,EAAEC,IAAI,EAAE;IAC5C,IAAIH,WAAW,EAAE,OAAOG,IAAI;IAC5BL,QAAQ,CAACI,IAAI,EAAE,UAAUE,GAAG,EAAET,MAAM,EAAE;MACpC,IAAIA,MAAM,EAAE;QACVK,WAAW,GAAG,IAAI;QAClBK,OAAO,CAACC,QAAQ,CAACP,EAAE,CAACQ,IAAI,CAAC,IAAI,EAAE,IAAI,EAAEZ,MAAM,CAAC,CAAC;MAC/C;MACAQ,IAAI,CAACC,GAAG,CAAC;IACX,CAAC,CAAC;EACJ,CAAC,EAAE,YAAY;IACb,IAAI,CAACJ,WAAW,EAAE;MAChBD,EAAE,EAAE;IACN;EACF,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"script"}
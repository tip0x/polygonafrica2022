{"ast":null,"code":"const levelup = require('levelup');\nconst memdown = require('memdown');\nconst async = require('async');\nconst inherits = require('util').inherits;\nconst Readable = require('readable-stream').Readable;\nconst levelws = require('level-ws');\nconst callTogether = require('./util').callTogether;\nmodule.exports = checkpointInterface;\nfunction checkpointInterface(trie) {\n  this._scratch = null;\n  trie._checkpoints = [];\n  Object.defineProperty(trie, 'isCheckpoint', {\n    get: function () {\n      return !!trie._checkpoints.length;\n    }\n  });\n\n  // new methods\n  trie.checkpoint = checkpoint;\n  trie.commit = commit;\n  trie.revert = revert;\n  trie._enterCpMode = _enterCpMode;\n  trie._exitCpMode = _exitCpMode;\n  trie.createScratchReadStream = createScratchReadStream;\n\n  // overwrites\n  trie.copy = copy.bind(trie, trie.copy.bind(trie));\n}\n\n/**\n * Creates a checkpoint that can later be reverted to or committed. After this is called, no changes to the trie will be permanently saved until `commit` is called\n * @method checkpoint\n */\nfunction checkpoint() {\n  var self = this;\n  var wasCheckpoint = self.isCheckpoint;\n  self._checkpoints.push(self.root);\n  if (!wasCheckpoint && self.isCheckpoint) {\n    self._enterCpMode();\n  }\n}\n\n/**\n * commits a checkpoint to disk\n * @method commit\n * @param {Function} cb the callback\n */\nfunction commit(cb) {\n  var self = this;\n  cb = callTogether(cb, self.sem.leave);\n  self.sem.take(function () {\n    if (self.isCheckpoint) {\n      self._checkpoints.pop();\n      if (!self.isCheckpoint) {\n        self._exitCpMode(true, cb);\n      } else {\n        cb();\n      }\n    } else {\n      throw new Error('trying to commit when not checkpointed');\n    }\n  });\n}\n\n/**\n * Reverts the trie to the state it was at when `checkpoint` was first called.\n * @method revert\n * @param {Function} cb the callback\n */\nfunction revert(cb) {\n  var self = this;\n  cb = callTogether(cb, self.sem.leave);\n  self.sem.take(function () {\n    if (self.isCheckpoint) {\n      self.root = self._checkpoints.pop();\n      if (!self.isCheckpoint) {\n        self._exitCpMode(false, cb);\n        return;\n      }\n    }\n    cb();\n  });\n}\n\n// enter into checkpoint mode\nfunction _enterCpMode() {\n  this._scratch = levelup('', {\n    db: memdown\n  });\n  this._getDBs = [this._scratch].concat(this._getDBs);\n  this.__putDBs = this._putDBs;\n  this._putDBs = [this._scratch];\n  this._putRaw = this.putRaw;\n  this.putRaw = putRaw;\n}\n\n// exit from checkpoint mode\nfunction _exitCpMode(commitState, cb) {\n  var self = this;\n  var scratch = this._scratch;\n  this._scratch = null;\n  this._getDBs = this._getDBs.slice(1);\n  this._putDBs = this.__putDBs;\n  this.putRaw = this._putRaw;\n  function flushScratch(db, cb) {\n    if (!db.createWriteStream) {\n      db = levelws(db);\n    }\n    self.createScratchReadStream(scratch).pipe(db.createWriteStream()).on('close', cb);\n  }\n  if (commitState) {\n    async.map(this._putDBs, flushScratch, cb);\n  } else {\n    cb();\n  }\n}\n\n// adds the interface when copying the trie\nfunction copy(_super) {\n  var trie = _super();\n  checkpointInterface.call(trie, trie);\n  trie._scratch = this._scratch;\n  // trie._checkpoints = this._checkpoints.slice()\n  return trie;\n}\nfunction putRaw(key, val, cb) {\n  function dbPut(db, cb2) {\n    db.put(key, val, {\n      keyEncoding: 'binary',\n      valueEncoding: 'binary'\n    }, cb2);\n  }\n  async.each(this.__putDBs, dbPut, cb);\n}\nfunction createScratchReadStream(scratch) {\n  var trie = this.copy();\n  scratch = scratch || this._scratch;\n  // only read from the scratch\n  trie._getDBs = [scratch];\n  trie._scratch = scratch;\n  return new ScratchReadStream(trie);\n}\n\n// ScratchReadStream\n// this is used to minimally dump the scratch into the db\n\ninherits(ScratchReadStream, Readable);\nfunction ScratchReadStream(trie) {\n  this.trie = trie;\n  this.next = null;\n  Readable.call(this, {\n    objectMode: true\n  });\n}\nScratchReadStream.prototype._read = function () {\n  var self = this;\n  if (!self._started) {\n    self._started = true;\n    self.trie._findDbNodes(function (nodeRef, node, key, next) {\n      self.push({\n        key: nodeRef,\n        value: node.serialize()\n      });\n      next();\n    }, function () {\n      // close stream\n      self.push(null);\n    });\n  }\n};","map":{"version":3,"names":["levelup","require","memdown","async","inherits","Readable","levelws","callTogether","module","exports","checkpointInterface","trie","_scratch","_checkpoints","Object","defineProperty","get","length","checkpoint","commit","revert","_enterCpMode","_exitCpMode","createScratchReadStream","copy","bind","self","wasCheckpoint","isCheckpoint","push","root","cb","sem","leave","take","pop","Error","db","_getDBs","concat","__putDBs","_putDBs","_putRaw","putRaw","commitState","scratch","slice","flushScratch","createWriteStream","pipe","on","map","_super","call","key","val","dbPut","cb2","put","keyEncoding","valueEncoding","each","ScratchReadStream","next","objectMode","prototype","_read","_started","_findDbNodes","nodeRef","node","value","serialize"],"sources":["/home/tiptape/relearningculture/zkevm/frontend/node_modules/merkle-patricia-tree/checkpoint-interface.js"],"sourcesContent":["const levelup = require('levelup')\nconst memdown = require('memdown')\nconst async = require('async')\nconst inherits = require('util').inherits\nconst Readable = require('readable-stream').Readable\nconst levelws = require('level-ws')\nconst callTogether = require('./util').callTogether\n\nmodule.exports = checkpointInterface\n\nfunction checkpointInterface (trie) {\n  this._scratch = null\n  trie._checkpoints = []\n\n  Object.defineProperty(trie, 'isCheckpoint', {\n    get: function () {\n      return !!trie._checkpoints.length\n    }\n  })\n\n  // new methods\n  trie.checkpoint = checkpoint\n  trie.commit = commit\n  trie.revert = revert\n  trie._enterCpMode = _enterCpMode\n  trie._exitCpMode = _exitCpMode\n  trie.createScratchReadStream = createScratchReadStream\n\n  // overwrites\n  trie.copy = copy.bind(trie, trie.copy.bind(trie))\n}\n\n/**\n * Creates a checkpoint that can later be reverted to or committed. After this is called, no changes to the trie will be permanently saved until `commit` is called\n * @method checkpoint\n */\nfunction checkpoint () {\n  var self = this\n  var wasCheckpoint = self.isCheckpoint\n  self._checkpoints.push(self.root)\n  if (!wasCheckpoint && self.isCheckpoint) {\n    self._enterCpMode()\n  }\n}\n\n/**\n * commits a checkpoint to disk\n * @method commit\n * @param {Function} cb the callback\n */\nfunction commit (cb) {\n  var self = this\n  cb = callTogether(cb, self.sem.leave)\n\n  self.sem.take(function () {\n    if (self.isCheckpoint) {\n      self._checkpoints.pop()\n      if (!self.isCheckpoint) {\n        self._exitCpMode(true, cb)\n      } else {\n        cb()\n      }\n    } else {\n      throw new Error('trying to commit when not checkpointed')\n    }\n  })\n}\n\n/**\n * Reverts the trie to the state it was at when `checkpoint` was first called.\n * @method revert\n * @param {Function} cb the callback\n */\nfunction revert (cb) {\n  var self = this\n  cb = callTogether(cb, self.sem.leave)\n\n  self.sem.take(function () {\n    if (self.isCheckpoint) {\n      self.root = self._checkpoints.pop()\n      if (!self.isCheckpoint) {\n        self._exitCpMode(false, cb)\n        return\n      }\n    }\n\n    cb()\n  })\n}\n\n// enter into checkpoint mode\nfunction _enterCpMode () {\n  this._scratch = levelup('', {\n    db: memdown\n  })\n  this._getDBs = [this._scratch].concat(this._getDBs)\n  this.__putDBs = this._putDBs\n  this._putDBs = [this._scratch]\n  this._putRaw = this.putRaw\n  this.putRaw = putRaw\n}\n\n// exit from checkpoint mode\nfunction _exitCpMode (commitState, cb) {\n  var self = this\n  var scratch = this._scratch\n  this._scratch = null\n  this._getDBs = this._getDBs.slice(1)\n  this._putDBs = this.__putDBs\n  this.putRaw = this._putRaw\n\n  function flushScratch (db, cb) {\n    if (!db.createWriteStream) {\n      db = levelws(db)\n    }\n\n    self.createScratchReadStream(scratch)\n      .pipe(db.createWriteStream())\n      .on('close', cb)\n  }\n\n  if (commitState) {\n    async.map(this._putDBs, flushScratch, cb)\n  } else {\n    cb()\n  }\n}\n\n// adds the interface when copying the trie\nfunction copy (_super) {\n  var trie = _super()\n  checkpointInterface.call(trie, trie)\n  trie._scratch = this._scratch\n  // trie._checkpoints = this._checkpoints.slice()\n  return trie\n}\n\nfunction putRaw (key, val, cb) {\n  function dbPut (db, cb2) {\n    db.put(key, val, {\n      keyEncoding: 'binary',\n      valueEncoding: 'binary'\n    }, cb2)\n  }\n  async.each(this.__putDBs, dbPut, cb)\n}\n\nfunction createScratchReadStream (scratch) {\n  var trie = this.copy()\n  scratch = scratch || this._scratch\n  // only read from the scratch\n  trie._getDBs = [scratch]\n  trie._scratch = scratch\n  return new ScratchReadStream(trie)\n}\n\n// ScratchReadStream\n// this is used to minimally dump the scratch into the db\n\ninherits(ScratchReadStream, Readable)\n\nfunction ScratchReadStream (trie) {\n  this.trie = trie\n  this.next = null\n  Readable.call(this, {\n    objectMode: true\n  })\n}\n\nScratchReadStream.prototype._read = function () {\n  var self = this\n  if (!self._started) {\n    self._started = true\n    self.trie._findDbNodes(function (nodeRef, node, key, next) {\n      self.push({\n        key: nodeRef,\n        value: node.serialize()\n      })\n      next()\n    }, function () {\n      // close stream\n      self.push(null)\n    })\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"const rlp = require('rlp');\nconst ethUtil = require('ethereumjs-util');\nmodule.exports = TrieNode;\nfunction TrieNode(type, key, value) {\n  if (Array.isArray(type)) {\n    // parse raw node\n    this.parseNode(type);\n  } else {\n    this.type = type;\n    if (type === 'branch') {\n      var values = key;\n      this.raw = Array.apply(null, Array(17));\n      if (values) {\n        values.forEach(function (keyVal) {\n          this.set.apply(this, keyVal);\n        });\n      }\n    } else {\n      this.raw = Array(2);\n      this.setValue(value);\n      this.setKey(key);\n    }\n  }\n}\nTrieNode.isRawNode = isRawNode;\nTrieNode.addHexPrefix = addHexPrefix;\nTrieNode.removeHexPrefix = removeHexPrefix;\nTrieNode.isTerminator = isTerminator;\nTrieNode.stringToNibbles = stringToNibbles;\nTrieNode.nibblesToBuffer = nibblesToBuffer;\nTrieNode.getNodeType = getNodeType;\nObject.defineProperty(TrieNode.prototype, 'value', {\n  get: function () {\n    return this.getValue();\n  },\n  set: function (v) {\n    this.setValue(v);\n  }\n});\nObject.defineProperty(TrieNode.prototype, 'key', {\n  get: function () {\n    return this.getKey();\n  },\n  set: function (k) {\n    this.setKey(k);\n  }\n});\n\n// parses a raw node\nTrieNode.prototype.parseNode = function (rawNode) {\n  this.raw = rawNode;\n  this.type = getNodeType(rawNode);\n};\n\n// sets the value of the node\nTrieNode.prototype.setValue = function (key, value) {\n  if (this.type !== 'branch') {\n    this.raw[1] = key;\n  } else {\n    if (arguments.length === 1) {\n      value = key;\n      key = 16;\n    }\n    this.raw[key] = value;\n  }\n};\nTrieNode.prototype.getValue = function (key) {\n  if (this.type === 'branch') {\n    if (arguments.length === 0) {\n      key = 16;\n    }\n    var val = this.raw[key];\n    if (val !== null && val !== undefined && val.length !== 0) {\n      return val;\n    }\n  } else {\n    return this.raw[1];\n  }\n};\nTrieNode.prototype.setKey = function (key) {\n  if (this.type !== 'branch') {\n    if (Buffer.isBuffer(key)) {\n      key = stringToNibbles(key);\n    } else {\n      key = key.slice(0); // copy the key\n    }\n\n    key = addHexPrefix(key, this.type === 'leaf');\n    this.raw[0] = nibblesToBuffer(key);\n  }\n};\n\n// returns the key as a nibble\nTrieNode.prototype.getKey = function () {\n  if (this.type !== 'branch') {\n    var key = this.raw[0];\n    key = removeHexPrefix(stringToNibbles(key));\n    return key;\n  }\n};\nTrieNode.prototype.serialize = function () {\n  return rlp.encode(this.raw);\n};\nTrieNode.prototype.hash = function () {\n  return ethUtil.sha3(this.serialize());\n};\nTrieNode.prototype.toString = function () {\n  var out = this.type;\n  out += ': [';\n  this.raw.forEach(function (el) {\n    if (Buffer.isBuffer(el)) {\n      out += el.toString('hex') + ', ';\n    } else if (el) {\n      out += 'object, ';\n    } else {\n      out += 'empty, ';\n    }\n  });\n  out = out.slice(0, -2);\n  out += ']';\n  return out;\n};\nTrieNode.prototype.getChildren = function () {\n  var children = [];\n  switch (this.type) {\n    case 'leaf':\n      // no children\n      break;\n    case 'extention':\n      // one child\n      children.push([this.key, this.getValue()]);\n      break;\n    case 'branch':\n      for (var index = 0, end = 16; index < end; index++) {\n        var value = this.getValue(index);\n        if (value) {\n          children.push([[index], value]);\n        }\n      }\n      break;\n  }\n  return children;\n};\n\n/**\n * @param {Array} dataArr\n * @returns {Buffer} - returns buffer of encoded data\n * hexPrefix\n **/\nfunction addHexPrefix(key, terminator) {\n  // odd\n  if (key.length % 2) {\n    key.unshift(1);\n  } else {\n    // even\n    key.unshift(0);\n    key.unshift(0);\n  }\n  if (terminator) {\n    key[0] += 2;\n  }\n  return key;\n}\nfunction removeHexPrefix(val) {\n  if (val[0] % 2) {\n    val = val.slice(1);\n  } else {\n    val = val.slice(2);\n  }\n  return val;\n}\n\n/**\n * Determines if a key has Arnold Schwarzenegger in it.\n * @method isTerminator\n * @param {Array} key - an hexprefixed array of nibbles\n */\nfunction isTerminator(key) {\n  return key[0] > 1;\n}\n\n/**\n * Converts a string OR a buffer to a nibble array.\n * @method stringToNibbles\n * @param {Buffer| String} key\n */\nfunction stringToNibbles(key) {\n  var bkey = new Buffer(key);\n  var nibbles = [];\n  for (var i = 0; i < bkey.length; i++) {\n    var q = i * 2;\n    nibbles[q] = bkey[i] >> 4;\n    ++q;\n    nibbles[q] = bkey[i] % 16;\n  }\n  return nibbles;\n}\n\n/**\n * Converts a nibble array into a buffer.\n * @method nibblesToBuffer\n * @param arr\n */\nfunction nibblesToBuffer(arr) {\n  var buf = new Buffer(arr.length / 2);\n  for (var i = 0; i < buf.length; i++) {\n    var q = i * 2;\n    buf[i] = (arr[q] << 4) + arr[++q];\n  }\n  return buf;\n}\n\n/**\n * Determines the node type.\n * @returns {String} - the node type\n *   - leaf - if the node is a leaf\n *   - branch - if the node is a branch\n *   - extention - if the node is an extention\n *   - unknown - if something else got borked\n */\nfunction getNodeType(node) {\n  if (node.length === 17) {\n    return 'branch';\n  } else if (node.length === 2) {\n    var key = stringToNibbles(node[0]);\n    if (isTerminator(key)) {\n      return 'leaf';\n    }\n    return 'extention';\n  }\n}\nfunction isRawNode(node) {\n  return Array.isArray(node) && !Buffer.isBuffer(node);\n}","map":{"version":3,"names":["rlp","require","ethUtil","module","exports","TrieNode","type","key","value","Array","isArray","parseNode","values","raw","apply","forEach","keyVal","set","setValue","setKey","isRawNode","addHexPrefix","removeHexPrefix","isTerminator","stringToNibbles","nibblesToBuffer","getNodeType","Object","defineProperty","prototype","get","getValue","v","getKey","k","rawNode","arguments","length","val","undefined","Buffer","isBuffer","slice","serialize","encode","hash","sha3","toString","out","el","getChildren","children","push","index","end","terminator","unshift","bkey","nibbles","i","q","arr","buf","node"],"sources":["/home/tiptape/relearningculture/zkevm/frontend/node_modules/merkle-patricia-tree/trieNode.js"],"sourcesContent":["const rlp = require('rlp')\nconst ethUtil = require('ethereumjs-util')\n\nmodule.exports = TrieNode\n\nfunction TrieNode (type, key, value) {\n  if (Array.isArray(type)) {\n    // parse raw node\n    this.parseNode(type)\n  } else {\n    this.type = type\n    if (type === 'branch') {\n      var values = key\n      this.raw = Array.apply(null, Array(17))\n      if (values) {\n        values.forEach(function (keyVal) {\n          this.set.apply(this, keyVal)\n        })\n      }\n    } else {\n      this.raw = Array(2)\n      this.setValue(value)\n      this.setKey(key)\n    }\n  }\n}\n\nTrieNode.isRawNode = isRawNode\nTrieNode.addHexPrefix = addHexPrefix\nTrieNode.removeHexPrefix = removeHexPrefix\nTrieNode.isTerminator = isTerminator\nTrieNode.stringToNibbles = stringToNibbles\nTrieNode.nibblesToBuffer = nibblesToBuffer\nTrieNode.getNodeType = getNodeType\n\nObject.defineProperty(TrieNode.prototype, 'value', {\n  get: function () {\n    return this.getValue()\n  },\n  set: function (v) {\n    this.setValue(v)\n  }\n})\n\nObject.defineProperty(TrieNode.prototype, 'key', {\n  get: function () {\n    return this.getKey()\n  },\n  set: function (k) {\n    this.setKey(k)\n  }\n})\n\n// parses a raw node\nTrieNode.prototype.parseNode = function (rawNode) {\n  this.raw = rawNode\n  this.type = getNodeType(rawNode)\n}\n\n// sets the value of the node\nTrieNode.prototype.setValue = function (key, value) {\n  if (this.type !== 'branch') {\n    this.raw[1] = key\n  } else {\n    if (arguments.length === 1) {\n      value = key\n      key = 16\n    }\n    this.raw[key] = value\n  }\n}\n\nTrieNode.prototype.getValue = function (key) {\n  if (this.type === 'branch') {\n    if (arguments.length === 0) {\n      key = 16\n    }\n\n    var val = this.raw[key]\n    if (val !== null && val !== undefined && val.length !== 0) {\n      return val\n    }\n  } else {\n    return this.raw[1]\n  }\n}\n\nTrieNode.prototype.setKey = function (key) {\n  if (this.type !== 'branch') {\n    if (Buffer.isBuffer(key)) {\n      key = stringToNibbles(key)\n    } else {\n      key = key.slice(0) // copy the key\n    }\n\n    key = addHexPrefix(key, this.type === 'leaf')\n    this.raw[0] = nibblesToBuffer(key)\n  }\n}\n\n// returns the key as a nibble\nTrieNode.prototype.getKey = function () {\n  if (this.type !== 'branch') {\n    var key = this.raw[0]\n    key = removeHexPrefix(stringToNibbles(key))\n    return (key)\n  }\n}\n\nTrieNode.prototype.serialize = function () {\n  return rlp.encode(this.raw)\n}\n\nTrieNode.prototype.hash = function () {\n  return ethUtil.sha3(this.serialize())\n}\n\nTrieNode.prototype.toString = function () {\n  var out = this.type\n  out += ': ['\n  this.raw.forEach(function (el) {\n    if (Buffer.isBuffer(el)) {\n      out += el.toString('hex') + ', '\n    } else if (el) {\n      out += 'object, '\n    } else {\n      out += 'empty, '\n    }\n  })\n  out = out.slice(0, -2)\n  out += ']'\n  return out\n}\n\nTrieNode.prototype.getChildren = function () {\n  var children = []\n  switch (this.type) {\n    case 'leaf':\n      // no children\n      break\n    case 'extention':\n      // one child\n      children.push([this.key, this.getValue()])\n      break\n    case 'branch':\n      for (var index = 0, end = 16; index < end; index++) {\n        var value = this.getValue(index)\n        if (value) {\n          children.push([\n            [index], value\n          ])\n        }\n      }\n      break\n  }\n  return children\n}\n\n/**\n * @param {Array} dataArr\n * @returns {Buffer} - returns buffer of encoded data\n * hexPrefix\n **/\nfunction addHexPrefix (key, terminator) {\n  // odd\n  if (key.length % 2) {\n    key.unshift(1)\n  } else {\n    // even\n    key.unshift(0)\n    key.unshift(0)\n  }\n\n  if (terminator) {\n    key[0] += 2\n  }\n\n  return key\n}\n\nfunction removeHexPrefix (val) {\n  if (val[0] % 2) {\n    val = val.slice(1)\n  } else {\n    val = val.slice(2)\n  }\n\n  return val\n}\n\n/**\n * Determines if a key has Arnold Schwarzenegger in it.\n * @method isTerminator\n * @param {Array} key - an hexprefixed array of nibbles\n */\nfunction isTerminator (key) {\n  return key[0] > 1\n}\n\n/**\n * Converts a string OR a buffer to a nibble array.\n * @method stringToNibbles\n * @param {Buffer| String} key\n */\nfunction stringToNibbles (key) {\n  var bkey = new Buffer(key)\n  var nibbles = []\n\n  for (var i = 0; i < bkey.length; i++) {\n    var q = i * 2\n    nibbles[q] = bkey[i] >> 4\n    ++q\n    nibbles[q] = bkey[i] % 16\n  }\n  return nibbles\n}\n\n/**\n * Converts a nibble array into a buffer.\n * @method nibblesToBuffer\n * @param arr\n */\nfunction nibblesToBuffer (arr) {\n  var buf = new Buffer(arr.length / 2)\n  for (var i = 0; i < buf.length; i++) {\n    var q = i * 2\n    buf[i] = (arr[q] << 4) + arr[++q]\n  }\n  return buf\n}\n\n/**\n * Determines the node type.\n * @returns {String} - the node type\n *   - leaf - if the node is a leaf\n *   - branch - if the node is a branch\n *   - extention - if the node is an extention\n *   - unknown - if something else got borked\n */\nfunction getNodeType (node) {\n  if (node.length === 17) {\n    return 'branch'\n  } else if (node.length === 2) {\n    var key = stringToNibbles(node[0])\n    if (isTerminator(key)) {\n      return 'leaf'\n    }\n\n    return 'extention'\n  }\n}\n\nfunction isRawNode (node) {\n  return Array.isArray(node) && !Buffer.isBuffer(node)\n}\n"],"mappings":"AAAA,MAAMA,GAAG,GAAGC,OAAO,CAAC,KAAK,CAAC;AAC1B,MAAMC,OAAO,GAAGD,OAAO,CAAC,iBAAiB,CAAC;AAE1CE,MAAM,CAACC,OAAO,GAAGC,QAAQ;AAEzB,SAASA,QAAQ,CAAEC,IAAI,EAAEC,GAAG,EAAEC,KAAK,EAAE;EACnC,IAAIC,KAAK,CAACC,OAAO,CAACJ,IAAI,CAAC,EAAE;IACvB;IACA,IAAI,CAACK,SAAS,CAACL,IAAI,CAAC;EACtB,CAAC,MAAM;IACL,IAAI,CAACA,IAAI,GAAGA,IAAI;IAChB,IAAIA,IAAI,KAAK,QAAQ,EAAE;MACrB,IAAIM,MAAM,GAAGL,GAAG;MAChB,IAAI,CAACM,GAAG,GAAGJ,KAAK,CAACK,KAAK,CAAC,IAAI,EAAEL,KAAK,CAAC,EAAE,CAAC,CAAC;MACvC,IAAIG,MAAM,EAAE;QACVA,MAAM,CAACG,OAAO,CAAC,UAAUC,MAAM,EAAE;UAC/B,IAAI,CAACC,GAAG,CAACH,KAAK,CAAC,IAAI,EAAEE,MAAM,CAAC;QAC9B,CAAC,CAAC;MACJ;IACF,CAAC,MAAM;MACL,IAAI,CAACH,GAAG,GAAGJ,KAAK,CAAC,CAAC,CAAC;MACnB,IAAI,CAACS,QAAQ,CAACV,KAAK,CAAC;MACpB,IAAI,CAACW,MAAM,CAACZ,GAAG,CAAC;IAClB;EACF;AACF;AAEAF,QAAQ,CAACe,SAAS,GAAGA,SAAS;AAC9Bf,QAAQ,CAACgB,YAAY,GAAGA,YAAY;AACpChB,QAAQ,CAACiB,eAAe,GAAGA,eAAe;AAC1CjB,QAAQ,CAACkB,YAAY,GAAGA,YAAY;AACpClB,QAAQ,CAACmB,eAAe,GAAGA,eAAe;AAC1CnB,QAAQ,CAACoB,eAAe,GAAGA,eAAe;AAC1CpB,QAAQ,CAACqB,WAAW,GAAGA,WAAW;AAElCC,MAAM,CAACC,cAAc,CAACvB,QAAQ,CAACwB,SAAS,EAAE,OAAO,EAAE;EACjDC,GAAG,EAAE,YAAY;IACf,OAAO,IAAI,CAACC,QAAQ,EAAE;EACxB,CAAC;EACDd,GAAG,EAAE,UAAUe,CAAC,EAAE;IAChB,IAAI,CAACd,QAAQ,CAACc,CAAC,CAAC;EAClB;AACF,CAAC,CAAC;AAEFL,MAAM,CAACC,cAAc,CAACvB,QAAQ,CAACwB,SAAS,EAAE,KAAK,EAAE;EAC/CC,GAAG,EAAE,YAAY;IACf,OAAO,IAAI,CAACG,MAAM,EAAE;EACtB,CAAC;EACDhB,GAAG,EAAE,UAAUiB,CAAC,EAAE;IAChB,IAAI,CAACf,MAAM,CAACe,CAAC,CAAC;EAChB;AACF,CAAC,CAAC;;AAEF;AACA7B,QAAQ,CAACwB,SAAS,CAAClB,SAAS,GAAG,UAAUwB,OAAO,EAAE;EAChD,IAAI,CAACtB,GAAG,GAAGsB,OAAO;EAClB,IAAI,CAAC7B,IAAI,GAAGoB,WAAW,CAACS,OAAO,CAAC;AAClC,CAAC;;AAED;AACA9B,QAAQ,CAACwB,SAAS,CAACX,QAAQ,GAAG,UAAUX,GAAG,EAAEC,KAAK,EAAE;EAClD,IAAI,IAAI,CAACF,IAAI,KAAK,QAAQ,EAAE;IAC1B,IAAI,CAACO,GAAG,CAAC,CAAC,CAAC,GAAGN,GAAG;EACnB,CAAC,MAAM;IACL,IAAI6B,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1B7B,KAAK,GAAGD,GAAG;MACXA,GAAG,GAAG,EAAE;IACV;IACA,IAAI,CAACM,GAAG,CAACN,GAAG,CAAC,GAAGC,KAAK;EACvB;AACF,CAAC;AAEDH,QAAQ,CAACwB,SAAS,CAACE,QAAQ,GAAG,UAAUxB,GAAG,EAAE;EAC3C,IAAI,IAAI,CAACD,IAAI,KAAK,QAAQ,EAAE;IAC1B,IAAI8B,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1B9B,GAAG,GAAG,EAAE;IACV;IAEA,IAAI+B,GAAG,GAAG,IAAI,CAACzB,GAAG,CAACN,GAAG,CAAC;IACvB,IAAI+B,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKC,SAAS,IAAID,GAAG,CAACD,MAAM,KAAK,CAAC,EAAE;MACzD,OAAOC,GAAG;IACZ;EACF,CAAC,MAAM;IACL,OAAO,IAAI,CAACzB,GAAG,CAAC,CAAC,CAAC;EACpB;AACF,CAAC;AAEDR,QAAQ,CAACwB,SAAS,CAACV,MAAM,GAAG,UAAUZ,GAAG,EAAE;EACzC,IAAI,IAAI,CAACD,IAAI,KAAK,QAAQ,EAAE;IAC1B,IAAIkC,MAAM,CAACC,QAAQ,CAAClC,GAAG,CAAC,EAAE;MACxBA,GAAG,GAAGiB,eAAe,CAACjB,GAAG,CAAC;IAC5B,CAAC,MAAM;MACLA,GAAG,GAAGA,GAAG,CAACmC,KAAK,CAAC,CAAC,CAAC,EAAC;IACrB;;IAEAnC,GAAG,GAAGc,YAAY,CAACd,GAAG,EAAE,IAAI,CAACD,IAAI,KAAK,MAAM,CAAC;IAC7C,IAAI,CAACO,GAAG,CAAC,CAAC,CAAC,GAAGY,eAAe,CAAClB,GAAG,CAAC;EACpC;AACF,CAAC;;AAED;AACAF,QAAQ,CAACwB,SAAS,CAACI,MAAM,GAAG,YAAY;EACtC,IAAI,IAAI,CAAC3B,IAAI,KAAK,QAAQ,EAAE;IAC1B,IAAIC,GAAG,GAAG,IAAI,CAACM,GAAG,CAAC,CAAC,CAAC;IACrBN,GAAG,GAAGe,eAAe,CAACE,eAAe,CAACjB,GAAG,CAAC,CAAC;IAC3C,OAAQA,GAAG;EACb;AACF,CAAC;AAEDF,QAAQ,CAACwB,SAAS,CAACc,SAAS,GAAG,YAAY;EACzC,OAAO3C,GAAG,CAAC4C,MAAM,CAAC,IAAI,CAAC/B,GAAG,CAAC;AAC7B,CAAC;AAEDR,QAAQ,CAACwB,SAAS,CAACgB,IAAI,GAAG,YAAY;EACpC,OAAO3C,OAAO,CAAC4C,IAAI,CAAC,IAAI,CAACH,SAAS,EAAE,CAAC;AACvC,CAAC;AAEDtC,QAAQ,CAACwB,SAAS,CAACkB,QAAQ,GAAG,YAAY;EACxC,IAAIC,GAAG,GAAG,IAAI,CAAC1C,IAAI;EACnB0C,GAAG,IAAI,KAAK;EACZ,IAAI,CAACnC,GAAG,CAACE,OAAO,CAAC,UAAUkC,EAAE,EAAE;IAC7B,IAAIT,MAAM,CAACC,QAAQ,CAACQ,EAAE,CAAC,EAAE;MACvBD,GAAG,IAAIC,EAAE,CAACF,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI;IAClC,CAAC,MAAM,IAAIE,EAAE,EAAE;MACbD,GAAG,IAAI,UAAU;IACnB,CAAC,MAAM;MACLA,GAAG,IAAI,SAAS;IAClB;EACF,CAAC,CAAC;EACFA,GAAG,GAAGA,GAAG,CAACN,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACtBM,GAAG,IAAI,GAAG;EACV,OAAOA,GAAG;AACZ,CAAC;AAED3C,QAAQ,CAACwB,SAAS,CAACqB,WAAW,GAAG,YAAY;EAC3C,IAAIC,QAAQ,GAAG,EAAE;EACjB,QAAQ,IAAI,CAAC7C,IAAI;IACf,KAAK,MAAM;MACT;MACA;IACF,KAAK,WAAW;MACd;MACA6C,QAAQ,CAACC,IAAI,CAAC,CAAC,IAAI,CAAC7C,GAAG,EAAE,IAAI,CAACwB,QAAQ,EAAE,CAAC,CAAC;MAC1C;IACF,KAAK,QAAQ;MACX,KAAK,IAAIsB,KAAK,GAAG,CAAC,EAAEC,GAAG,GAAG,EAAE,EAAED,KAAK,GAAGC,GAAG,EAAED,KAAK,EAAE,EAAE;QAClD,IAAI7C,KAAK,GAAG,IAAI,CAACuB,QAAQ,CAACsB,KAAK,CAAC;QAChC,IAAI7C,KAAK,EAAE;UACT2C,QAAQ,CAACC,IAAI,CAAC,CACZ,CAACC,KAAK,CAAC,EAAE7C,KAAK,CACf,CAAC;QACJ;MACF;MACA;EAAK;EAET,OAAO2C,QAAQ;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAAS9B,YAAY,CAAEd,GAAG,EAAEgD,UAAU,EAAE;EACtC;EACA,IAAIhD,GAAG,CAAC8B,MAAM,GAAG,CAAC,EAAE;IAClB9B,GAAG,CAACiD,OAAO,CAAC,CAAC,CAAC;EAChB,CAAC,MAAM;IACL;IACAjD,GAAG,CAACiD,OAAO,CAAC,CAAC,CAAC;IACdjD,GAAG,CAACiD,OAAO,CAAC,CAAC,CAAC;EAChB;EAEA,IAAID,UAAU,EAAE;IACdhD,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;EACb;EAEA,OAAOA,GAAG;AACZ;AAEA,SAASe,eAAe,CAAEgB,GAAG,EAAE;EAC7B,IAAIA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;IACdA,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC;EACpB,CAAC,MAAM;IACLJ,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC,CAAC,CAAC;EACpB;EAEA,OAAOJ,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASf,YAAY,CAAEhB,GAAG,EAAE;EAC1B,OAAOA,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASiB,eAAe,CAAEjB,GAAG,EAAE;EAC7B,IAAIkD,IAAI,GAAG,IAAIjB,MAAM,CAACjC,GAAG,CAAC;EAC1B,IAAImD,OAAO,GAAG,EAAE;EAEhB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,CAACpB,MAAM,EAAEsB,CAAC,EAAE,EAAE;IACpC,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC;IACbD,OAAO,CAACE,CAAC,CAAC,GAAGH,IAAI,CAACE,CAAC,CAAC,IAAI,CAAC;IACzB,EAAEC,CAAC;IACHF,OAAO,CAACE,CAAC,CAAC,GAAGH,IAAI,CAACE,CAAC,CAAC,GAAG,EAAE;EAC3B;EACA,OAAOD,OAAO;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA,SAASjC,eAAe,CAAEoC,GAAG,EAAE;EAC7B,IAAIC,GAAG,GAAG,IAAItB,MAAM,CAACqB,GAAG,CAACxB,MAAM,GAAG,CAAC,CAAC;EACpC,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGG,GAAG,CAACzB,MAAM,EAAEsB,CAAC,EAAE,EAAE;IACnC,IAAIC,CAAC,GAAGD,CAAC,GAAG,CAAC;IACbG,GAAG,CAACH,CAAC,CAAC,GAAG,CAACE,GAAG,CAACD,CAAC,CAAC,IAAI,CAAC,IAAIC,GAAG,CAAC,EAAED,CAAC,CAAC;EACnC;EACA,OAAOE,GAAG;AACZ;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASpC,WAAW,CAAEqC,IAAI,EAAE;EAC1B,IAAIA,IAAI,CAAC1B,MAAM,KAAK,EAAE,EAAE;IACtB,OAAO,QAAQ;EACjB,CAAC,MAAM,IAAI0B,IAAI,CAAC1B,MAAM,KAAK,CAAC,EAAE;IAC5B,IAAI9B,GAAG,GAAGiB,eAAe,CAACuC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClC,IAAIxC,YAAY,CAAChB,GAAG,CAAC,EAAE;MACrB,OAAO,MAAM;IACf;IAEA,OAAO,WAAW;EACpB;AACF;AAEA,SAASa,SAAS,CAAE2C,IAAI,EAAE;EACxB,OAAOtD,KAAK,CAACC,OAAO,CAACqD,IAAI,CAAC,IAAI,CAACvB,MAAM,CAACC,QAAQ,CAACsB,IAAI,CAAC;AACtD"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var _jsxFileName = \"/home/tiptape/relearningculture/zkevm/frontend/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Navbar from \"./Navbar\";\nimport WalletConnectProvider from \"@maticnetwork/walletconnect-provider\";\nconst config = require(\"./config.js\");\nconst MaticPoSClient = require(\"@maticnetwork/maticjs\").MaticPOSClient;\nconst Network = require(\"@maticnetwork/meta/network\");\nconst Matic = require(\"@maticnetwork/maticjs\");\nconst App = () => {\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n  let content;\n  const [Networkid, setNetworkid] = useState(0);\n  const [account, setAccount] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [amount, setInputAmount] = useState(\"\");\n  const [burnHash, setBurnHash] = useState(\"\");\n  const [zkevmProvider, setZKevmProvider] = useState();\n  const [mumbaiprovider, setMumbaiProvider] = useState();\n  const [bridgeOptions] = useState([{\n    label: \"Proof of Stake\",\n    value: \"Proof of Stake\"\n  }, {\n    label: \"Plasma\",\n    value: \"Plasma\"\n  }]);\n  const [tokenTypes, setTokenTypes] = useState([{\n    label: \"Ether\",\n    value: \"Ether\"\n  }, {\n    label: \"ERC20\",\n    value: \"ERC20\"\n  }, {\n    label: \"ERC721\",\n    value: \"ERC721\"\n  }, {\n    label: \"ERC1155\",\n    value: \"ERC1155\"\n  }]);\n  const [selectedBridgeOption, setSelectedBridgeOption] = useState({\n    label: \"Proof of Stake\"\n  });\n  const [selectedToken, setSelectedToken] = useState({\n    label: \"Ether\"\n  });\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  };\n  const loadBlockchainData = async () => {\n    setLoading(true);\n    const zkevmProvider = new WalletConnectProvider({\n      host: config.ZKEVM_RPC,\n      callbacks: {\n        onConnect: console.log(\"matic connected\"),\n        onDisconnect: console.log(\"matic disconnected!\")\n      }\n    });\n    const ethereumProvider = new WalletConnectProvider({\n      host: config.ETHEREUM_RPC,\n      callbacks: {\n        onConnect: console.log(\"mainchain connected\"),\n        onDisconnect: console.log(\"mainchain disconnected\")\n      }\n    });\n    setMaticProvider(maticProvider);\n    setEthereumProvider(ethereumProvider);\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n    const networkId = await web3.eth.net.getId();\n    setNetworkid(networkId);\n    if (networkId === config.MUMBAI_CHAINID) {\n      setLoading(false);\n    } else if (networkId === config.ZKEVM_CHAINID) {\n      setLoading(false);\n    } else {\n      window.alert(\" switch to Polygon Mumbai or zkEVM network\");\n    }\n  };\n  // posClientGeneral facilitates the operations like approve, deposit, exit\n  const posClientParent = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: maticProvider,\n      parentProvider: window.web3,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    return maticPoSClient;\n  };\n  // posclientBurn facilitates the burning of tokens on the matic chain\n  const posClientChild = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: window.web3,\n      parentProvider: ethereumprovider,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    return maticPoSClient;\n  };\n  // getMaticPlasmaClient facilitates the burning of tokens on the matic chain\n  const getMaticPlasmaParent = async function () {\n    let _network = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : config.NETWORK;\n    let _version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.VERSION;\n    const network = new Network(_network, _version);\n    const matic = new Matic({\n      network: _network,\n      version: _version,\n      parentProvider: window.web3,\n      maticProvider: maticProvider,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    await matic.initialize();\n    return {\n      matic,\n      network\n    };\n  };\n\n  // getMaticPlasmaClientBurn facilitates the operations like approve, deposit,confirmWithdraw ,exit\n  const getMaticPlasmaChild = async function () {\n    let _network = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : config.NETWORK;\n    let _version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : config.VERSION;\n    const matic = new Matic({\n      network: _network,\n      version: _version,\n      parentProvider: ethereumprovider,\n      maticProvider: window.web3,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    await matic.initialize();\n    return {\n      matic\n    };\n  };\n\n  // POS ether functionality\n\n  const depositEther = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await maticPoSClient.depositEtherForUser(account, x1, {\n      from: account\n    });\n  };\n  const burnEther = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient.burnERC20(config.posChildWETH, x1, {\n      from: account\n    }).then(res => {\n      console.log(res.transactionHash);\n      setBurnHash(res.transactionHash);\n    });\n  };\n  const exitEther = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient.exitERC20(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"exit o/p\", res);\n    });\n  };\n\n  // POS ERC20 functionality\n\n  const depositERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await maticPoSClient.approveERC20ForDeposit(config.posRootERC20, x1, {\n      from: account\n    });\n    await maticPoSClient.depositERC20ForUser(config.posRootERC20, account, x1, {\n      from: account\n    });\n  };\n  const burnERC20 = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient.burnERC20(config.posChildERC20, x1, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n    });\n  };\n  const exitERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient.exitERC20(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"exit o/p\", res);\n    });\n  };\n  // POS ERC721 functionality\n\n  const depositERC721 = async () => {\n    const maticPoSClient = posClientParent();\n    const tokenId = inputValue.toString();\n    await maticPoSClient.approveERC721ForDeposit(config.posRootERC721, tokenId, {\n      from: account\n    });\n    await maticPoSClient.depositERC721ForUser(config.posRootERC721, account, tokenId, {\n      from: account\n    });\n  };\n  const burnERC721 = async () => {\n    const maticPoSClient = posClientChild();\n    const tokenId = inputValue.toString();\n    await maticPoSClient.burnERC721(config.posChildERC721, tokenId, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n    });\n  };\n  const exitERC721 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient.exitERC721(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"exit o/p\", res);\n    });\n  };\n\n  // POS ERC1155 functionality\n\n  const depositERC1155 = async () => {\n    const maticPoSClient = posClientParent();\n    const tokenId = inputValue.toString();\n    await maticPoSClient.approveERC1155ForDeposit(config.posRootERC1155, {\n      from: account\n    });\n    await maticPoSClient.depositSingleERC1155ForUser(config.posRootERC1155, account, tokenId, amount, {\n      from: account\n    });\n  };\n  const burnERC1155 = async () => {\n    const maticPoSClient = posClientChild();\n    const tokenId = inputValue.toString();\n    await maticPoSClient.burnSingleERC1155(config.posChildERC721, tokenId, amount, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n    });\n  };\n  const exitERC1155 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient.exitSingleERC1155(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"exit o/p\", res);\n    });\n  };\n  const onchange = e => {\n    setInputValue(e.target.value);\n  };\n  const onamountchange = e => {\n    setInputAmount(e.target.value);\n  };\n\n  // Plasma ether functionality\n  const depositEtherPlasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await matic.depositEther(x1, {\n      from: account\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n  const burnEtherPlasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaChild();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await matic.startWithdraw(config.plasmaWETH, x1, {\n      from: account\n    }).then(res => {\n      console.log(\"burn ether plasma txn hash\", res.transactionHash);\n    });\n  };\n  const confirmWithdrawEtherPlasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    await matic.withdraw(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"Confirm withdraw hash: \", res.transactionHash);\n    });\n  };\n  const exitEtherPlasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    await matic.processExits(config.rootChainWETH, {\n      from: account\n    }).then(res => {\n      console.log(\"process exit\", res.transactionHash);\n    });\n  };\n\n  // Plasma ERC20 functionality\n  const depositERC20Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await matic.approveERC20TokensForDeposit(config.plasmaRootERC20, x1, {\n      from: account\n    });\n    return matic.depositERC20ForUser(config.plasmaRootERC20, account, x1, {\n      from: account\n    });\n  };\n  const burnERC20Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaChild();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    matic.startWithdraw(config.plasmaChildERC20, x1, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n      console.log(res.transactionHash);\n    });\n  };\n  const confirmWithdrawERC20Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    matic.withdraw(inputValue, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n      console.log(res.transactionHash);\n    });\n  };\n  const exitERC20Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    await matic.processExits(config.plasmaRootERC20, {\n      from: account\n    }).then(res => {\n      console.log(\"Exit hash: \", res.transactionHash);\n    });\n  };\n\n  // Plasma ERC721 functionality\n  const depositERC721Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    const tokenId = inputValue;\n    await matic.approveERC20TokensForDeposit(config.plasmaRootERC721, tokenId, {\n      from: account\n    });\n    return matic.safeDepositERC721Tokens(config.plasmaRootERC721, tokenId, {\n      from: account\n    });\n  };\n  const burnERC721Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaChild();\n    const tokenId = inputValue;\n    matic.startWithdrawForNFT(config.plasmaChildERC721, tokenId, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n      console.log(res.transactionHash);\n    });\n  };\n  const confirmWithdrawERC721Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    matic.withdrawNFT(inputValue, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n      console.log(res.transactionHash);\n    });\n  };\n  const exitERC721Plasma = async () => {\n    const {\n      matic\n    } = await getMaticPlasmaParent();\n    await matic.processExits(config.plasmaRootERC721, {\n      from: account\n    }).then(res => {\n      console.log(\"Exit hash: \", res.transactionHash);\n    });\n  };\n  if (loading === true) {} else {\n    content = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"POS\",\n      hidden: selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 478,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"Ether\",\n      hidden: selectedToken.label === \"Ether\" && selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositEther,\n      disabled: Networkid !== 0 && Networkid === config.ZKEVM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnEther,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 504,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitEther,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"pos-inputValue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 13\n      }\n    }, Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? `Amount in Ether for deposit or burn transaction hash to exit` : `Amount of Ether to burn`), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"pos-inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 532,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 541,\n        columnNumber: 13\n      }\n    }, burnHash)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ERC20\",\n      hidden: selectedToken.label === \"ERC20\" && selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 543,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositERC20,\n      disabled: Networkid !== 0 && Networkid === config.ZKEVM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 552,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnERC20,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitERC20,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 574,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"erc20-pos-inputValue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 586,\n        columnNumber: 13\n      }\n    }, Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? `Amount of tokens to deposit or burn transaction hash to exit` : `Amount of tokens to burn`), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"erc20-pos-inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 13\n      }\n    }, burnHash)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ERC721\",\n      hidden: selectedToken.label === \"ERC721\" && selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositERC721,\n      disabled: Networkid !== 0 && Networkid === config.ZKEVM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnERC721,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitERC721,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"erc721-pos-inputValue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 645,\n        columnNumber: 13\n      }\n    }, Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? `tokenId for deposit or burn transaction hash to exit` : `TokenId to burn`), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"erc721-pos-inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 650,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 660,\n        columnNumber: 13\n      }\n    }, burnHash)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ERC1155\",\n      hidden: selectedToken.label === \"ERC1155\" && selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 662,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositERC1155,\n      disabled: Networkid !== 0 && Networkid === config.ZKEVM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 671,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnERC1155,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 682,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitERC1155,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"erc1155-pos-tokenId\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 705,\n        columnNumber: 13\n      }\n    }, Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? `tokenID for deposit or burn transaction hash for exit` : `tokenId`), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"erc1155-pos-tokenId\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 710,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 719,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"erc1155-pos-amount\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 720,\n        columnNumber: 13\n      }\n    }, \"Amount\"), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"erc1155-pos-amount\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"amount\",\n      value: amount,\n      onChange: onamountchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 13\n      }\n    }, burnHash))), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"plasma\",\n      hidden: selectedBridgeOption.label === \"Plasma\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 734,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"PlasmaEther\",\n      hidden: selectedToken.label === \"Ether\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 738,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositEtherPlasma,\n      disabled: Networkid !== 0 && Networkid === config.ZKEVM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 742,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnEtherPlasma,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 753,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: confirmWithdrawEtherPlasma,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 763,\n        columnNumber: 13\n      }\n    }, \"Confirm Withdraw\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitEtherPlasma,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 774,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 785,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"plasma-ether-inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 786,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 795,\n        columnNumber: 13\n      }\n    }, burnHash)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"PlasmaERC20\",\n      hidden: selectedToken.label === \"ERC20\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 797,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositERC20Plasma,\n      disabled: Networkid !== 0 && Networkid === config.ZKEVM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnERC20Plasma,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 812,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: confirmWithdrawERC20Plasma,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 822,\n        columnNumber: 13\n      }\n    }, \"Confirm Withdraw\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitERC20Plasma,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 833,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 844,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"plasma-erc20-inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 845,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 854,\n        columnNumber: 13\n      }\n    }, burnHash)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"PlasmaERC721\",\n      hidden: selectedToken.label === \"ERC721\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 856,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositERC721Plasma,\n      disabled: Networkid !== 0 && Networkid === config.ZKEVM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnERC721Plasma,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 871,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: confirmWithdrawERC721Plasma,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 881,\n        columnNumber: 13\n      }\n    }, \"Confirm Withdraw\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitERC721Plasma,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 892,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 903,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"plasma-erc721-inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 913,\n        columnNumber: 13\n      }\n    }, burnHash))));\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 921,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    account: account,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 922,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 923,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => {\n      setSelectedBridgeOption({\n        label: e.target.value\n      });\n      if (e.target.value === \"Plasma\") {\n        setTokenTypes([{\n          label: \"Ether\",\n          value: \"Ether\"\n        }, {\n          label: \"ERC20\",\n          value: \"ERC20\"\n        }, {\n          label: \"ERC721\",\n          value: \"ERC721\"\n        }]);\n      } else {\n        setTokenTypes([{\n          label: \"Ether\",\n          value: \"Ether\"\n        }, {\n          label: \"ERC20\",\n          value: \"ERC20\"\n        }, {\n          label: \"ERC721\",\n          value: \"ERC721\"\n        }, {\n          label: \"ERC1155\",\n          value: \"ERC1155\"\n        }]);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 924,\n      columnNumber: 9\n    }\n  }, bridgeOptions.map(item => /*#__PURE__*/React.createElement(\"option\", {\n    key: item.value,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 965,\n      columnNumber: 13\n    }\n  }, item.label)))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 971,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => setSelectedToken({\n      label: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 9\n    }\n  }, tokenTypes.map(item => /*#__PURE__*/React.createElement(\"option\", {\n    key: item.value,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 974,\n      columnNumber: 13\n    }\n  }, item.label)))), content);\n};\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","Web3","Navbar","WalletConnectProvider","config","require","MaticPoSClient","MaticPOSClient","Network","Matic","App","loadWeb3","loadBlockchainData","content","Networkid","setNetworkid","account","setAccount","loading","setLoading","inputValue","setInputValue","amount","setInputAmount","burnHash","setBurnHash","zkevmProvider","setZKevmProvider","mumbaiprovider","setMumbaiProvider","bridgeOptions","label","value","tokenTypes","setTokenTypes","selectedBridgeOption","setSelectedBridgeOption","selectedToken","setSelectedToken","window","ethereum","web3","enable","currentProvider","alert","host","ZKEVM_RPC","callbacks","onConnect","console","log","onDisconnect","ethereumProvider","ETHEREUM_RPC","setMaticProvider","maticProvider","setEthereumProvider","accounts","eth","getAccounts","networkId","net","getId","MUMBAI_CHAINID","ZKEVM_CHAINID","posClientParent","maticPoSClient","network","NETWORK","version","VERSION","parentProvider","parentDefaultOptions","from","maticDefaultOptions","posClientChild","ethereumprovider","getMaticPlasmaParent","_network","_version","matic","initialize","getMaticPlasmaChild","depositEther","x","x1","toString","depositEtherForUser","burnEther","burnERC20","posChildWETH","then","res","transactionHash","exitEther","exitERC20","depositERC20","approveERC20ForDeposit","posRootERC20","depositERC20ForUser","posChildERC20","depositERC721","tokenId","approveERC721ForDeposit","posRootERC721","depositERC721ForUser","burnERC721","posChildERC721","exitERC721","depositERC1155","approveERC1155ForDeposit","posRootERC1155","depositSingleERC1155ForUser","burnERC1155","burnSingleERC1155","exitERC1155","exitSingleERC1155","onchange","e","target","onamountchange","depositEtherPlasma","catch","err","burnEtherPlasma","startWithdraw","plasmaWETH","confirmWithdrawEtherPlasma","withdraw","exitEtherPlasma","processExits","rootChainWETH","depositERC20Plasma","approveERC20TokensForDeposit","plasmaRootERC20","burnERC20Plasma","plasmaChildERC20","confirmWithdrawERC20Plasma","exitERC20Plasma","depositERC721Plasma","plasmaRootERC721","safeDepositERC721Tokens","burnERC721Plasma","startWithdrawForNFT","plasmaChildERC721","confirmWithdrawERC721Plasma","withdrawNFT","exitERC721Plasma","map","item"],"sources":["/home/tiptape/relearningculture/zkevm/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Navbar from \"./Navbar\";\nimport WalletConnectProvider from \"@maticnetwork/walletconnect-provider\";\nconst config = require(\"./config.js\");\nconst MaticPoSClient = require(\"@maticnetwork/maticjs\").MaticPOSClient;\nconst Network = require(\"@maticnetwork/meta/network\");\nconst Matic = require(\"@maticnetwork/maticjs\");\n\nconst App = () => {\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n  let content;\n  const [Networkid, setNetworkid] = useState(0);\n  const [account, setAccount] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [inputValue, setInputValue] = useState(\"\");\n  const [amount, setInputAmount] = useState(\"\");\n  const [burnHash, setBurnHash] = useState(\"\");\n  const [zkevmProvider, setZKevmProvider] = useState();\n  const [mumbaiprovider, setMumbaiProvider] = useState();\n  const [bridgeOptions] = useState([\n    {\n      label: \"Proof of Stake\",\n      value: \"Proof of Stake\",\n    },\n    {\n      label: \"Plasma\",\n      value: \"Plasma\",\n    },\n  ]);\n  const [tokenTypes, setTokenTypes] = useState([\n    {\n      label: \"Ether\",\n      value: \"Ether\",\n    },\n    {\n      label: \"ERC20\",\n      value: \"ERC20\",\n    },\n    {\n      label: \"ERC721\",\n      value: \"ERC721\",\n    },\n    {\n      label: \"ERC1155\",\n      value: \"ERC1155\",\n    },\n  ]);\n  const [selectedBridgeOption, setSelectedBridgeOption] = useState({\n    label: \"Proof of Stake\",\n  });\n  const [selectedToken, setSelectedToken] = useState({\n    label: \"Ether\",\n  });\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    setLoading(true);\n    const zkevmProvider = new WalletConnectProvider({\n      host: config.ZKEVM_RPC,\n      callbacks: {\n        onConnect: console.log(\"matic connected\"),\n        onDisconnect: console.log(\"matic disconnected!\"),\n      },\n    });\n\n    const ethereumProvider = new WalletConnectProvider({\n      host: config.ETHEREUM_RPC,\n      callbacks: {\n        onConnect: console.log(\"mainchain connected\"),\n        onDisconnect: console.log(\"mainchain disconnected\"),\n      },\n    });\n\n    setMaticProvider(maticProvider);\n    setEthereumProvider(ethereumProvider);\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n    const networkId = await web3.eth.net.getId();\n\n    setNetworkid(networkId);\n\n    if (networkId === config.MUMBAI_CHAINID) {\n      setLoading(false);\n    } else if (networkId === config.ZKEVM_CHAINID) {\n      setLoading(false);\n    } else {\n      window.alert(\" switch to Polygon Mumbai or zkEVM network\");\n    }\n  };\n  // posClientGeneral facilitates the operations like approve, deposit, exit\n  const posClientParent = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: maticProvider,\n      parentProvider: window.web3,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    return maticPoSClient;\n  };\n  // posclientBurn facilitates the burning of tokens on the matic chain\n  const posClientChild = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: window.web3,\n      parentProvider: ethereumprovider,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    return maticPoSClient;\n  };\n  // getMaticPlasmaClient facilitates the burning of tokens on the matic chain\n  const getMaticPlasmaParent = async (\n    _network = config.NETWORK,\n    _version = config.VERSION\n  ) => {\n    const network = new Network(_network, _version);\n    const matic = new Matic({\n      network: _network,\n      version: _version,\n      parentProvider: window.web3,\n      maticProvider: maticProvider,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    await matic.initialize();\n    return { matic, network };\n  };\n\n  // getMaticPlasmaClientBurn facilitates the operations like approve, deposit,confirmWithdraw ,exit\n  const getMaticPlasmaChild = async (\n    _network = config.NETWORK,\n    _version = config.VERSION\n  ) => {\n    const matic = new Matic({\n      network: _network,\n      version: _version,\n      parentProvider: ethereumprovider,\n      maticProvider: window.web3,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    await matic.initialize();\n    return { matic };\n  };\n\n  // POS ether functionality\n\n  const depositEther = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n\n    await maticPoSClient.depositEtherForUser(account, x1, {\n      from: account,\n    });\n  };\n\n  const burnEther = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient\n      .burnERC20(config.posChildWETH, x1, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(res.transactionHash);\n        setBurnHash(res.transactionHash);\n      });\n  };\n\n  const exitEther = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient\n      .exitERC20(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"exit o/p\", res);\n      });\n  };\n\n  // POS ERC20 functionality\n\n  const depositERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await maticPoSClient.approveERC20ForDeposit(config.posRootERC20, x1, {\n      from: account,\n    });\n    await maticPoSClient.depositERC20ForUser(config.posRootERC20, account, x1, {\n      from: account,\n    });\n  };\n\n  const burnERC20 = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient\n      .burnERC20(config.posChildERC20, x1, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n      });\n  };\n\n  const exitERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient\n      .exitERC20(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"exit o/p\", res);\n      });\n  };\n  // POS ERC721 functionality\n\n  const depositERC721 = async () => {\n    const maticPoSClient = posClientParent();\n    const tokenId = inputValue.toString();\n    await maticPoSClient.approveERC721ForDeposit(\n      config.posRootERC721,\n      tokenId,\n      {\n        from: account,\n      }\n    );\n    await maticPoSClient.depositERC721ForUser(\n      config.posRootERC721,\n      account,\n      tokenId,\n      {\n        from: account,\n      }\n    );\n  };\n\n  const burnERC721 = async () => {\n    const maticPoSClient = posClientChild();\n    const tokenId = inputValue.toString();\n    await maticPoSClient\n      .burnERC721(config.posChildERC721, tokenId, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n      });\n  };\n\n  const exitERC721 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient\n      .exitERC721(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"exit o/p\", res);\n      });\n  };\n\n  // POS ERC1155 functionality\n\n  const depositERC1155 = async () => {\n    const maticPoSClient = posClientParent();\n    const tokenId = inputValue.toString();\n    await maticPoSClient.approveERC1155ForDeposit(config.posRootERC1155, {\n      from: account,\n    });\n    await maticPoSClient.depositSingleERC1155ForUser(\n      config.posRootERC1155,\n      account,\n      tokenId,\n      amount,\n      {\n        from: account,\n      }\n    );\n  };\n\n  const burnERC1155 = async () => {\n    const maticPoSClient = posClientChild();\n    const tokenId = inputValue.toString();\n    await maticPoSClient\n      .burnSingleERC1155(config.posChildERC721, tokenId, amount, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n      });\n  };\n\n  const exitERC1155 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient\n      .exitSingleERC1155(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"exit o/p\", res);\n      });\n  };\n\n  const onchange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const onamountchange = (e) => {\n    setInputAmount(e.target.value);\n  };\n\n  // Plasma ether functionality\n  const depositEtherPlasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await matic\n      .depositEther(x1, {\n        from: account,\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const burnEtherPlasma = async () => {\n    const { matic } = await getMaticPlasmaChild();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await matic\n      .startWithdraw(config.plasmaWETH, x1, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"burn ether plasma txn hash\", res.transactionHash);\n      });\n  };\n\n  const confirmWithdrawEtherPlasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    await matic.withdraw(inputValue, { from: account }).then((res) => {\n      console.log(\"Confirm withdraw hash: \", res.transactionHash);\n    });\n  };\n\n  const exitEtherPlasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    await matic\n      .processExits(config.rootChainWETH, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"process exit\", res.transactionHash);\n      });\n  };\n\n  // Plasma ERC20 functionality\n  const depositERC20Plasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await matic.approveERC20TokensForDeposit(config.plasmaRootERC20, x1, {\n      from: account,\n    });\n    return matic.depositERC20ForUser(config.plasmaRootERC20, account, x1, {\n      from: account,\n    });\n  };\n  const burnERC20Plasma = async () => {\n    const { matic } = await getMaticPlasmaChild();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    matic\n      .startWithdraw(config.plasmaChildERC20, x1, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n        console.log(res.transactionHash);\n      });\n  };\n\n  const confirmWithdrawERC20Plasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    matic\n      .withdraw(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n        console.log(res.transactionHash);\n      });\n  };\n\n  const exitERC20Plasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    await matic\n      .processExits(config.plasmaRootERC20, { from: account })\n      .then((res) => {\n        console.log(\"Exit hash: \", res.transactionHash);\n      });\n  };\n\n  // Plasma ERC721 functionality\n  const depositERC721Plasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    const tokenId = inputValue;\n    await matic.approveERC20TokensForDeposit(config.plasmaRootERC721, tokenId, {\n      from: account,\n    });\n    return matic.safeDepositERC721Tokens(config.plasmaRootERC721, tokenId, {\n      from: account,\n    });\n  };\n\n  const burnERC721Plasma = async () => {\n    const { matic } = await getMaticPlasmaChild();\n    const tokenId = inputValue;\n    matic\n      .startWithdrawForNFT(config.plasmaChildERC721, tokenId, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n        console.log(res.transactionHash);\n      });\n  };\n\n  const confirmWithdrawERC721Plasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    matic\n      .withdrawNFT(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n        console.log(res.transactionHash);\n      });\n  };\n\n  const exitERC721Plasma = async () => {\n    const { matic } = await getMaticPlasmaParent();\n    await matic\n      .processExits(config.plasmaRootERC721, { from: account })\n      .then((res) => {\n        console.log(\"Exit hash: \", res.transactionHash);\n      });\n  };\n\n  if (loading === true) {\n  } else {\n    content = (\n      <div>\n        <div\n          id=\"POS\"\n          hidden={\n            selectedBridgeOption.label === \"Proof of Stake\" ? false : true\n          }\n        >\n          <div\n            id=\"Ether\"\n            hidden={\n              selectedToken.label === \"Ether\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositEther}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnEther}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitEther}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <label for=\"pos-inputValue\">\n              {Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                ? `Amount in Ether for deposit or burn transaction hash to exit`\n                : `Amount of Ether to burn`}\n            </label>\n            <input\n              id=\"pos-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"ERC20\"\n            hidden={\n              selectedToken.label === \"ERC20\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <label for=\"erc20-pos-inputValue\">\n              {Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                ? `Amount of tokens to deposit or burn transaction hash to exit`\n                : `Amount of tokens to burn`}\n            </label>\n            <input\n              id=\"erc20-pos-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"ERC721\"\n            hidden={\n              selectedToken.label === \"ERC721\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositERC721}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC721}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitERC721}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <label for=\"erc721-pos-inputValue\">\n              {Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                ? `tokenId for deposit or burn transaction hash to exit`\n                : `TokenId to burn`}\n            </label>\n            <input\n              id=\"erc721-pos-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"ERC1155\"\n            hidden={\n              selectedToken.label === \"ERC1155\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositERC1155}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC1155}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitERC1155}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <label for=\"erc1155-pos-tokenId\">\n              {Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                ? `tokenID for deposit or burn transaction hash for exit`\n                : `tokenId`}\n            </label>\n            <input\n              id=\"erc1155-pos-tokenId\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <br />\n            <label for=\"erc1155-pos-amount\">Amount</label>\n            <input\n              id=\"erc1155-pos-amount\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"amount\"\n              value={amount}\n              onChange={onamountchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n        </div>\n\n        <div\n          id=\"plasma\"\n          hidden={selectedBridgeOption.label === \"Plasma\" ? false : true}\n        >\n          <div\n            id=\"PlasmaEther\"\n            hidden={selectedToken.label === \"Ether\" ? false : true}\n          >\n            <button\n              onClick={depositEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n            <button\n              onClick={confirmWithdrawEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              Confirm Withdraw\n            </button>\n\n            <button\n              onClick={exitEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <input\n              id=\"plasma-ether-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"PlasmaERC20\"\n            hidden={selectedToken.label === \"ERC20\" ? false : true}\n          >\n            <button\n              onClick={depositERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n            <button\n              onClick={confirmWithdrawERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              Confirm Withdraw\n            </button>\n\n            <button\n              onClick={exitERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <input\n              id=\"plasma-erc20-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"PlasmaERC721\"\n            hidden={selectedToken.label === \"ERC721\" ? false : true}\n          >\n            <button\n              onClick={depositERC721Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC721Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n            <button\n              onClick={confirmWithdrawERC721Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              Confirm Withdraw\n            </button>\n\n            <button\n              onClick={exitERC721Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <input\n              id=\"plasma-erc721-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Navbar account={account} />\n      <div>\n        <select\n          onChange={(e) => {\n            setSelectedBridgeOption({ label: e.target.value });\n            if (e.target.value === \"Plasma\") {\n              setTokenTypes([\n                {\n                  label: \"Ether\",\n                  value: \"Ether\",\n                },\n                {\n                  label: \"ERC20\",\n                  value: \"ERC20\",\n                },\n                {\n                  label: \"ERC721\",\n                  value: \"ERC721\",\n                },\n              ]);\n            } else {\n              setTokenTypes([\n                {\n                  label: \"Ether\",\n                  value: \"Ether\",\n                },\n                {\n                  label: \"ERC20\",\n                  value: \"ERC20\",\n                },\n                {\n                  label: \"ERC721\",\n                  value: \"ERC721\",\n                },\n                {\n                  label: \"ERC1155\",\n                  value: \"ERC1155\",\n                },\n              ]);\n            }\n          }}\n        >\n          {bridgeOptions.map((item) => (\n            <option key={item.value} value={item.value}>\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <select onChange={(e) => setSelectedToken({ label: e.target.value })}>\n          {tokenTypes.map((item) => (\n            <option key={item.value} value={item.value}>\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {content}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/tiptape/relearningculture/zkevm/frontend/src/App.js\";\nimport React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Navbar from \"./Navbar\";\nimport WalletConnectProvider from \"@maticnetwork/walletconnect-provider\";\nconst config = require(\"./config.js\");\nconst MaticPoSClient = require(\"@maticnetwork/maticjs\").MaticPOSClient;\n// const Network = require(\"@maticnetwork/meta/network\");\n// const Matic = require(\"@maticnetwork/maticjs\");\n\nconst App = () => {\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n  let content;\n  const [Networkid, setNetworkid] = useState(0);\n  const [account, setAccount] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [inputValue] = useState(\"\");\n  // const [amount, setInputAmount] = useState(\"\");\n  const [burnHash, setBurnHash] = useState(\"\");\n  const [zkevmProvider, setZKevmProvider] = useState();\n  const [mumbaiProvider, setMumbaiProvider] = useState();\n  const [bridgeOptions] = useState([{\n    label: \"Proof of Stake\",\n    value: \"Proof of Stake\"\n  }\n  // {\n  //   label: \"Plasma\",\n  //   value: \"Plasma\",\n  // },\n  ]);\n\n  const [tokenTypes, setTokenTypes] = useState([{\n    label: \"Ether\",\n    value: \"Ether\"\n  }, {\n    label: \"ERC20\",\n    value: \"ERC20\"\n  }\n  // {\n  //   label: \"ERC721\",\n  //   value: \"ERC721\",\n  // },\n  // {\n  //   label: \"ERC1155\",\n  //   value: \"ERC1155\",\n  // },\n  ]);\n\n  const [selectedBridgeOption, setSelectedBridgeOption] = useState({\n    label: \"Proof of Stake\"\n  });\n  const [selectedToken, setSelectedToken] = useState({\n    label: \"Ether\"\n  });\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\"Non-Ethereum browser detected. You should consider trying MetaMask!\");\n    }\n  };\n  const loadBlockchainData = async () => {\n    setLoading(true);\n    const zkevmProvider = new WalletConnectProvider({\n      host: config.ZKEVM_RPC,\n      callbacks: {\n        onConnect: console.log(\"zkevm connected\"),\n        onDisconnect: console.log(\"zkevm disconnected!\")\n      }\n    });\n    const mumbaiProvider = new WalletConnectProvider({\n      host: config.MUMBAI_RPC,\n      callbacks: {\n        onConnect: console.log(\"mumbai connected\"),\n        onDisconnect: console.log(\"mumbai disconnected\")\n      }\n    });\n    setZKevmProvider(zkevmProvider);\n    setMumbaiProvider(mumbaiProvider);\n    const web3 = window.web3;\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n    const networkId = await web3.eth.net.getId();\n    setNetworkid(networkId);\n    if (networkId === config.MUMBAI_CHAINID) {\n      setLoading(false);\n    } else if (networkId === config.ZKEVM_CHAINID) {\n      setLoading(false);\n    } else {\n      window.alert(\" switch to Polygon Mumbai or zkEVM network\");\n    }\n  };\n  // posClientGeneral facilitates the operations like approve, deposit, exit\n  const posClientParent = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: zkevmProvider,\n      parentProvider: window.web3,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    return maticPoSClient;\n  };\n  // posclientBurn facilitates the burning of tokens on the matic chain\n  const posClientChild = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: window.web3,\n      parentProvider: mumbaiProvider,\n      parentDefaultOptions: {\n        from: account\n      },\n      maticDefaultOptions: {\n        from: account\n      }\n    });\n    return maticPoSClient;\n  };\n  // // getMaticPlasmaClient facilitates the burning of tokens on the matic chain\n  // const getMaticPlasmaParent = async (\n  //   _network = config.NETWORK,\n  //   _version = config.VERSION\n  // ) => {\n  //   const network = new Network(_network, _version);\n  //   const matic = new Matic({\n  //     network: _network,\n  //     version: _version,\n  //     parentProvider: window.web3,\n  //     maticProvider: zkevmProvider,\n  //     parentDefaultOptions: { from: account },\n  //     maticDefaultOptions: { from: account },\n  //   });\n  //   await matic.initialize();\n  //   return { matic, network };\n  // };\n\n  // getMaticPlasmaClientBurn facilitates the operations like approve, deposit,confirmWithdraw ,exit\n\n  // const getMaticPlasmaChild = async (\n  //   _network = config.NETWORK,\n  //   _version = config.VERSION\n  // ) => {\n  //   const matic = new Matic({\n  //     network: _network,\n  //     version: _version,\n  //     parentProvider: mumbaiProvider,\n  //     maticProvider: window.web3,\n  //     parentDefaultOptions: { from: account },\n  //     maticDefaultOptions: { from: account },\n  //   });\n  //   await matic.initialize();\n  //   return { matic };\n  // };\n\n  // POS ether functionality\n\n  const depositEther = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await maticPoSClient.depositEtherForUser(account, x1, {\n      from: account\n    });\n  };\n  const burnEther = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient.burnERC20(config.posChildWETH, x1, {\n      from: account\n    }).then(res => {\n      console.log(res.transactionHash);\n      setBurnHash(res.transactionHash);\n    });\n  };\n  const exitEther = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient.exitERC20(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"exit o/p\", res);\n    });\n  };\n\n  // POS ERC20 functionality\n\n  const depositERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await maticPoSClient.approveERC20ForDeposit(config.posRootERC20, x1, {\n      from: account\n    });\n    await maticPoSClient.depositERC20ForUser(config.posRootERC20, account, x1, {\n      from: account\n    });\n  };\n  const burnERC20 = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient.burnERC20(config.posChildERC20, x1, {\n      from: account\n    }).then(res => {\n      setBurnHash(res.transactionHash);\n    });\n  };\n  const exitERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient.exitERC20(inputValue, {\n      from: account\n    }).then(res => {\n      console.log(\"exit o/p\", res);\n    });\n  };\n\n  // // POS ERC721 functionality\n\n  // const depositERC721 = async () => {\n  //   const maticPoSClient = posClientParent();\n  //   const tokenId = inputValue.toString();\n  //   await maticPoSClient.approveERC721ForDeposit(\n  //     config.posRootERC721,\n  //     tokenId,\n  //     {\n  //       from: account,\n  //     }\n  //   );\n  //   await maticPoSClient.depositERC721ForUser(\n  //     config.posRootERC721,\n  //     account,\n  //     tokenId,\n  //     {\n  //       from: account,\n  //     }\n  //   );\n  // };\n\n  // const burnERC721 = async () => {\n  //   const maticPoSClient = posClientChild();\n  //   const tokenId = inputValue.toString();\n  //   await maticPoSClient\n  //     .burnERC721(config.posChildERC721, tokenId, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //     });\n  // };\n\n  // const exitERC721 = async () => {\n  //   const maticPoSClient = posClientParent();\n  //   await maticPoSClient\n  //     .exitERC721(inputValue, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       console.log(\"exit o/p\", res);\n  //     });\n  // };\n\n  // // POS ERC1155 functionality\n\n  // const depositERC1155 = async () => {\n  //   const maticPoSClient = posClientParent();\n  //   const tokenId = inputValue.toString();\n  //   await maticPoSClient.approveERC1155ForDeposit(config.posRootERC1155, {\n  //     from: account,\n  //   });\n  //   await maticPoSClient.depositSingleERC1155ForUser(\n  //     config.posRootERC1155,\n  //     account,\n  //     tokenId,\n  //     amount,\n  //     {\n  //       from: account,\n  //     }\n  //   );\n  // };\n\n  // const burnERC1155 = async () => {\n  //   const maticPoSClient = posClientChild();\n  //   const tokenId = inputValue.toString();\n  //   await maticPoSClient\n  //     .burnSingleERC1155(config.posChildERC721, tokenId, amount, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //     });\n  // };\n\n  // const exitERC1155 = async () => {\n  //   const maticPoSClient = posClientParent();\n  //   await maticPoSClient\n  //     .exitSingleERC1155(inputValue, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       console.log(\"exit o/p\", res);\n  //     });\n  // };\n\n  // const onchange = (e) => {\n  //   setInputValue(e.target.value);\n  // };\n\n  // const onamountchange = (e) => {\n  //   setInputAmount(e.target.value);\n  // };\n\n  // // Plasma ether functionality\n  // const depositEtherPlasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   const x = inputValue * 1000000000000000000; // 18 decimals\n  //   const x1 = x.toString();\n  //   await matic\n  //     .depositEther(x1, {\n  //       from: account,\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // };\n\n  // const burnEtherPlasma = async () => {\n  //   const { matic } = await getMaticPlasmaChild();\n  //   const x = inputValue * 1000000000000000000; // 18 decimals\n  //   const x1 = x.toString();\n  //   await matic\n  //     .startWithdraw(config.plasmaWETH, x1, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       console.log(\"burn ether plasma txn hash\", res.transactionHash);\n  //     });\n  // };\n\n  // const confirmWithdrawEtherPlasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   await matic.withdraw(inputValue, { from: account }).then((res) => {\n  //     console.log(\"Confirm withdraw hash: \", res.transactionHash);\n  //   });\n  // };\n\n  // const exitEtherPlasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   await matic\n  //     .processExits(config.rootChainWETH, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       console.log(\"process exit\", res.transactionHash);\n  //     });\n  // };\n\n  // // Plasma ERC20 functionality\n  // const depositERC20Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   const x = inputValue * 1000000000000000000; // 18 decimals\n  //   const x1 = x.toString();\n  //   await matic.approveERC20TokensForDeposit(config.plasmaRootERC20, x1, {\n  //     from: account,\n  //   });\n  //   return matic.depositERC20ForUser(config.plasmaRootERC20, account, x1, {\n  //     from: account,\n  //   });\n  // };\n  // const burnERC20Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaChild();\n  //   const x = inputValue * 1000000000000000000; // 18 decimals\n  //   const x1 = x.toString();\n  //   matic\n  //     .startWithdraw(config.plasmaChildERC20, x1, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //       console.log(res.transactionHash);\n  //     });\n  // };\n\n  // const confirmWithdrawERC20Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   matic\n  //     .withdraw(inputValue, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //       console.log(res.transactionHash);\n  //     });\n  // };\n\n  // const exitERC20Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   await matic\n  //     .processExits(config.plasmaRootERC20, { from: account })\n  //     .then((res) => {\n  //       console.log(\"Exit hash: \", res.transactionHash);\n  //     });\n  // };\n\n  // // Plasma ERC721 functionality\n  // const depositERC721Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   const tokenId = inputValue;\n  //   await matic.approveERC20TokensForDeposit(config.plasmaRootERC721, tokenId, {\n  //     from: account,\n  //   });\n  //   return matic.safeDepositERC721Tokens(config.plasmaRootERC721, tokenId, {\n  //     from: account,\n  //   });\n  // };\n\n  // const burnERC721Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaChild();\n  //   const tokenId = inputValue;\n  //   matic\n  //     .startWithdrawForNFT(config.plasmaChildERC721, tokenId, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //       console.log(res.transactionHash);\n  //     });\n  // };\n\n  // const confirmWithdrawERC721Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   matic\n  //     .withdrawNFT(inputValue, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //       console.log(res.transactionHash);\n  //     });\n  // };\n\n  // const exitERC721Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   await matic\n  //     .processExits(config.plasmaRootERC721, { from: account })\n  //     .then((res) => {\n  //       console.log(\"Exit hash: \", res.transactionHash);\n  //     });\n  // };\n\n  if (loading === true) {} else {\n    content = /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"POS\",\n      hidden: selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 480,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"Ether\",\n      hidden: selectedToken.label === \"Ether\" && selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositEther,\n      disabled: Networkid !== 0 && Networkid === config.ZKEVM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnEther,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 506,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitEther,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 517,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: \"pos-inputValue\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 13\n      }\n    }, Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? `Amount in Ether for deposit or burn transaction hash to exit` : `Amount of Ether to burn`), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"pos-inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 536,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 545,\n        columnNumber: 13\n      }\n    }, burnHash)), /*#__PURE__*/React.createElement(\"div\", {\n      id: \"ERC20\",\n      hidden: selectedToken.label === \"ERC20\" && selectedBridgeOption.label === \"Proof of Stake\" ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: depositERC20,\n      disabled: Networkid !== 0 && Networkid === config.ZKEVM_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 13\n      }\n    }, \"Deposit\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: burnERC20,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? true : false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 567,\n        columnNumber: 13\n      }\n    }, \"burn\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: exitERC20,\n      disabled: Networkid !== 0 && Networkid === config.MUMBAI_CHAINID ? false : true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 13\n      }\n    }, \"exit\"), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 910,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      id: \"plasma-erc721-inputValue\",\n      type: \"text\",\n      placeholder: \"value\",\n      name: \"inputValue\",\n      value: inputValue,\n      onChange: onchange,\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 911,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      id: \"burnHash\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 920,\n        columnNumber: 13\n      }\n    }, burnHash))));\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 928,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    account: account,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 929,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => {\n      setSelectedBridgeOption({\n        label: e.target.value\n      });\n      if (e.target.value === \"Plasma\") {\n        setTokenTypes([{\n          label: \"Ether\",\n          value: \"Ether\"\n        }, {\n          label: \"ERC20\",\n          value: \"ERC20\"\n        }\n        // {\n        //   label: \"ERC721\",\n        //   value: \"ERC721\",\n        // },\n        ]);\n      } else {\n        setTokenTypes([{\n          label: \"Ether\",\n          value: \"Ether\"\n        }, {\n          label: \"ERC20\",\n          value: \"ERC20\"\n        }\n        // {\n        //   label: \"ERC721\",\n        //   value: \"ERC721\",\n        // },\n        // {\n        //   label: \"ERC1155\",\n        //   value: \"ERC1155\",\n        // },\n        ]);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 931,\n      columnNumber: 9\n    }\n  }, bridgeOptions.map(item => /*#__PURE__*/React.createElement(\"option\", {\n    key: item.value,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 13\n    }\n  }, item.label)))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"select\", {\n    onChange: e => setSelectedToken({\n      label: e.target.value\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 9\n    }\n  }, tokenTypes.map(item => /*#__PURE__*/React.createElement(\"option\", {\n    key: item.value,\n    value: item.value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 981,\n      columnNumber: 13\n    }\n  }, item.label)))), content);\n};\nexport default App;","map":{"version":3,"names":["React","useEffect","useState","Web3","Navbar","WalletConnectProvider","config","require","MaticPoSClient","MaticPOSClient","App","loadWeb3","loadBlockchainData","content","Networkid","setNetworkid","account","setAccount","loading","setLoading","inputValue","burnHash","setBurnHash","zkevmProvider","setZKevmProvider","mumbaiProvider","setMumbaiProvider","bridgeOptions","label","value","tokenTypes","setTokenTypes","selectedBridgeOption","setSelectedBridgeOption","selectedToken","setSelectedToken","window","ethereum","web3","enable","currentProvider","alert","host","ZKEVM_RPC","callbacks","onConnect","console","log","onDisconnect","MUMBAI_RPC","accounts","eth","getAccounts","networkId","net","getId","MUMBAI_CHAINID","ZKEVM_CHAINID","posClientParent","maticPoSClient","network","NETWORK","version","VERSION","maticProvider","parentProvider","parentDefaultOptions","from","maticDefaultOptions","posClientChild","depositEther","x","x1","toString","depositEtherForUser","burnEther","burnERC20","posChildWETH","then","res","transactionHash","exitEther","exitERC20","depositERC20","approveERC20ForDeposit","posRootERC20","depositERC20ForUser","posChildERC20","onchange","e","target","map","item"],"sources":["/home/tiptape/relearningculture/zkevm/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport Navbar from \"./Navbar\";\nimport WalletConnectProvider from \"@maticnetwork/walletconnect-provider\";\nconst config = require(\"./config.js\");\nconst MaticPoSClient = require(\"@maticnetwork/maticjs\").MaticPOSClient;\n// const Network = require(\"@maticnetwork/meta/network\");\n// const Matic = require(\"@maticnetwork/maticjs\");\n\nconst App = () => {\n  useEffect(() => {\n    loadWeb3();\n    loadBlockchainData();\n  }, []);\n  let content;\n  const [Networkid, setNetworkid] = useState(0);\n  const [account, setAccount] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [inputValue] = useState(\"\");\n  // const [amount, setInputAmount] = useState(\"\");\n  const [burnHash, setBurnHash] = useState(\"\");\n  const [zkevmProvider, setZKevmProvider] = useState();\n  const [mumbaiProvider, setMumbaiProvider] = useState();\n  const [bridgeOptions] = useState([\n    {\n      label: \"Proof of Stake\",\n      value: \"Proof of Stake\",\n    },\n    // {\n    //   label: \"Plasma\",\n    //   value: \"Plasma\",\n    // },\n  ]);\n  const [tokenTypes, setTokenTypes] = useState([\n    {\n      label: \"Ether\",\n      value: \"Ether\",\n    },\n    {\n      label: \"ERC20\",\n      value: \"ERC20\",\n    },\n    // {\n    //   label: \"ERC721\",\n    //   value: \"ERC721\",\n    // },\n    // {\n    //   label: \"ERC1155\",\n    //   value: \"ERC1155\",\n    // },\n  ]);\n  const [selectedBridgeOption, setSelectedBridgeOption] = useState({\n    label: \"Proof of Stake\",\n  });\n  const [selectedToken, setSelectedToken] = useState({\n    label: \"Ether\",\n  });\n\n  const loadWeb3 = async () => {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected. You should consider trying MetaMask!\"\n      );\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    setLoading(true);\n    const zkevmProvider = new WalletConnectProvider({\n      host: config.ZKEVM_RPC,\n      callbacks: {\n        onConnect: console.log(\"zkevm connected\"),\n        onDisconnect: console.log(\"zkevm disconnected!\"),\n      },\n    });\n\n    const mumbaiProvider = new WalletConnectProvider({\n      host: config.MUMBAI_RPC,\n      callbacks: {\n        onConnect: console.log(\"mumbai connected\"),\n        onDisconnect: console.log(\"mumbai disconnected\"),\n      },\n    });\n\n    setZKevmProvider(zkevmProvider);\n    setMumbaiProvider(mumbaiProvider);\n    const web3 = window.web3;\n\n    const accounts = await web3.eth.getAccounts();\n    setAccount(accounts[0]);\n    const networkId = await web3.eth.net.getId();\n\n    setNetworkid(networkId);\n\n    if (networkId === config.MUMBAI_CHAINID) {\n      setLoading(false);\n    } else if (networkId === config.ZKEVM_CHAINID) {\n      setLoading(false);\n    } else {\n      window.alert(\" switch to Polygon Mumbai or zkEVM network\");\n    }\n  };\n  // posClientGeneral facilitates the operations like approve, deposit, exit\n  const posClientParent = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: zkevmProvider,\n      parentProvider: window.web3,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    return maticPoSClient;\n  };\n  // posclientBurn facilitates the burning of tokens on the matic chain\n  const posClientChild = () => {\n    const maticPoSClient = new MaticPoSClient({\n      network: config.NETWORK,\n      version: config.VERSION,\n      maticProvider: window.web3,\n      parentProvider: mumbaiProvider,\n      parentDefaultOptions: { from: account },\n      maticDefaultOptions: { from: account },\n    });\n    return maticPoSClient;\n  };\n  // // getMaticPlasmaClient facilitates the burning of tokens on the matic chain\n  // const getMaticPlasmaParent = async (\n  //   _network = config.NETWORK,\n  //   _version = config.VERSION\n  // ) => {\n  //   const network = new Network(_network, _version);\n  //   const matic = new Matic({\n  //     network: _network,\n  //     version: _version,\n  //     parentProvider: window.web3,\n  //     maticProvider: zkevmProvider,\n  //     parentDefaultOptions: { from: account },\n  //     maticDefaultOptions: { from: account },\n  //   });\n  //   await matic.initialize();\n  //   return { matic, network };\n  // };\n\n  // getMaticPlasmaClientBurn facilitates the operations like approve, deposit,confirmWithdraw ,exit\n\n  // const getMaticPlasmaChild = async (\n  //   _network = config.NETWORK,\n  //   _version = config.VERSION\n  // ) => {\n  //   const matic = new Matic({\n  //     network: _network,\n  //     version: _version,\n  //     parentProvider: mumbaiProvider,\n  //     maticProvider: window.web3,\n  //     parentDefaultOptions: { from: account },\n  //     maticDefaultOptions: { from: account },\n  //   });\n  //   await matic.initialize();\n  //   return { matic };\n  // };\n\n  // POS ether functionality\n\n  const depositEther = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n\n    await maticPoSClient.depositEtherForUser(account, x1, {\n      from: account,\n    });\n  };\n\n  const burnEther = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient\n      .burnERC20(config.posChildWETH, x1, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(res.transactionHash);\n        setBurnHash(res.transactionHash);\n      });\n  };\n\n  const exitEther = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient\n      .exitERC20(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"exit o/p\", res);\n      });\n  };\n\n  // POS ERC20 functionality\n\n  const depositERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    const x = inputValue * 1000000000000000000; // 18 decimals\n    const x1 = x.toString();\n    await maticPoSClient.approveERC20ForDeposit(config.posRootERC20, x1, {\n      from: account,\n    });\n    await maticPoSClient.depositERC20ForUser(config.posRootERC20, account, x1, {\n      from: account,\n    });\n  };\n\n  const burnERC20 = async () => {\n    const maticPoSClient = posClientChild();\n    const x = inputValue * 1000000000000000000;\n    const x1 = x.toString();\n    await maticPoSClient\n      .burnERC20(config.posChildERC20, x1, {\n        from: account,\n      })\n      .then((res) => {\n        setBurnHash(res.transactionHash);\n      });\n  };\n\n  const exitERC20 = async () => {\n    const maticPoSClient = posClientParent();\n    await maticPoSClient\n      .exitERC20(inputValue, {\n        from: account,\n      })\n      .then((res) => {\n        console.log(\"exit o/p\", res);\n      });\n  };\n\n  // // POS ERC721 functionality\n\n  // const depositERC721 = async () => {\n  //   const maticPoSClient = posClientParent();\n  //   const tokenId = inputValue.toString();\n  //   await maticPoSClient.approveERC721ForDeposit(\n  //     config.posRootERC721,\n  //     tokenId,\n  //     {\n  //       from: account,\n  //     }\n  //   );\n  //   await maticPoSClient.depositERC721ForUser(\n  //     config.posRootERC721,\n  //     account,\n  //     tokenId,\n  //     {\n  //       from: account,\n  //     }\n  //   );\n  // };\n\n  // const burnERC721 = async () => {\n  //   const maticPoSClient = posClientChild();\n  //   const tokenId = inputValue.toString();\n  //   await maticPoSClient\n  //     .burnERC721(config.posChildERC721, tokenId, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //     });\n  // };\n\n  // const exitERC721 = async () => {\n  //   const maticPoSClient = posClientParent();\n  //   await maticPoSClient\n  //     .exitERC721(inputValue, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       console.log(\"exit o/p\", res);\n  //     });\n  // };\n\n  // // POS ERC1155 functionality\n\n  // const depositERC1155 = async () => {\n  //   const maticPoSClient = posClientParent();\n  //   const tokenId = inputValue.toString();\n  //   await maticPoSClient.approveERC1155ForDeposit(config.posRootERC1155, {\n  //     from: account,\n  //   });\n  //   await maticPoSClient.depositSingleERC1155ForUser(\n  //     config.posRootERC1155,\n  //     account,\n  //     tokenId,\n  //     amount,\n  //     {\n  //       from: account,\n  //     }\n  //   );\n  // };\n\n  // const burnERC1155 = async () => {\n  //   const maticPoSClient = posClientChild();\n  //   const tokenId = inputValue.toString();\n  //   await maticPoSClient\n  //     .burnSingleERC1155(config.posChildERC721, tokenId, amount, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //     });\n  // };\n\n  // const exitERC1155 = async () => {\n  //   const maticPoSClient = posClientParent();\n  //   await maticPoSClient\n  //     .exitSingleERC1155(inputValue, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       console.log(\"exit o/p\", res);\n  //     });\n  // };\n\n  // const onchange = (e) => {\n  //   setInputValue(e.target.value);\n  // };\n\n  // const onamountchange = (e) => {\n  //   setInputAmount(e.target.value);\n  // };\n\n  // // Plasma ether functionality\n  // const depositEtherPlasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   const x = inputValue * 1000000000000000000; // 18 decimals\n  //   const x1 = x.toString();\n  //   await matic\n  //     .depositEther(x1, {\n  //       from: account,\n  //     })\n  //     .catch((err) => {\n  //       console.log(err);\n  //     });\n  // };\n\n  // const burnEtherPlasma = async () => {\n  //   const { matic } = await getMaticPlasmaChild();\n  //   const x = inputValue * 1000000000000000000; // 18 decimals\n  //   const x1 = x.toString();\n  //   await matic\n  //     .startWithdraw(config.plasmaWETH, x1, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       console.log(\"burn ether plasma txn hash\", res.transactionHash);\n  //     });\n  // };\n\n  // const confirmWithdrawEtherPlasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   await matic.withdraw(inputValue, { from: account }).then((res) => {\n  //     console.log(\"Confirm withdraw hash: \", res.transactionHash);\n  //   });\n  // };\n\n  // const exitEtherPlasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   await matic\n  //     .processExits(config.rootChainWETH, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       console.log(\"process exit\", res.transactionHash);\n  //     });\n  // };\n\n  // // Plasma ERC20 functionality\n  // const depositERC20Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   const x = inputValue * 1000000000000000000; // 18 decimals\n  //   const x1 = x.toString();\n  //   await matic.approveERC20TokensForDeposit(config.plasmaRootERC20, x1, {\n  //     from: account,\n  //   });\n  //   return matic.depositERC20ForUser(config.plasmaRootERC20, account, x1, {\n  //     from: account,\n  //   });\n  // };\n  // const burnERC20Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaChild();\n  //   const x = inputValue * 1000000000000000000; // 18 decimals\n  //   const x1 = x.toString();\n  //   matic\n  //     .startWithdraw(config.plasmaChildERC20, x1, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //       console.log(res.transactionHash);\n  //     });\n  // };\n\n  // const confirmWithdrawERC20Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   matic\n  //     .withdraw(inputValue, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //       console.log(res.transactionHash);\n  //     });\n  // };\n\n  // const exitERC20Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   await matic\n  //     .processExits(config.plasmaRootERC20, { from: account })\n  //     .then((res) => {\n  //       console.log(\"Exit hash: \", res.transactionHash);\n  //     });\n  // };\n\n  // // Plasma ERC721 functionality\n  // const depositERC721Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   const tokenId = inputValue;\n  //   await matic.approveERC20TokensForDeposit(config.plasmaRootERC721, tokenId, {\n  //     from: account,\n  //   });\n  //   return matic.safeDepositERC721Tokens(config.plasmaRootERC721, tokenId, {\n  //     from: account,\n  //   });\n  // };\n\n  // const burnERC721Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaChild();\n  //   const tokenId = inputValue;\n  //   matic\n  //     .startWithdrawForNFT(config.plasmaChildERC721, tokenId, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //       console.log(res.transactionHash);\n  //     });\n  // };\n\n  // const confirmWithdrawERC721Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   matic\n  //     .withdrawNFT(inputValue, {\n  //       from: account,\n  //     })\n  //     .then((res) => {\n  //       setBurnHash(res.transactionHash);\n  //       console.log(res.transactionHash);\n  //     });\n  // };\n\n  // const exitERC721Plasma = async () => {\n  //   const { matic } = await getMaticPlasmaParent();\n  //   await matic\n  //     .processExits(config.plasmaRootERC721, { from: account })\n  //     .then((res) => {\n  //       console.log(\"Exit hash: \", res.transactionHash);\n  //     });\n  // };\n\n  if (loading === true) {\n  } else {\n    content = (\n      <div>\n        <div\n          id=\"POS\"\n          hidden={\n            selectedBridgeOption.label === \"Proof of Stake\" ? false : true\n          }\n        >\n          <div\n            id=\"Ether\"\n            hidden={\n              selectedToken.label === \"Ether\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositEther}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnEther}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitEther}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            \n            <br />\n            <label for=\"pos-inputValue\">\n              {Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                ? `Amount in Ether for deposit or burn transaction hash to exit`\n                : `Amount of Ether to burn`}\n            </label>\n\n            <input\n              id=\"pos-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"ERC20\"\n            hidden={\n              selectedToken.label === \"ERC20\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitERC20}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n{/* \n            <br />\n\n            <label for=\"erc20-pos-inputValue\">\n              {Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                ? `Amount of tokens to deposit or burn transaction hash to exit`\n                : `Amount of tokens to burn`}\n            </label>\n\n            <input\n              id=\"erc20-pos-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"ERC721\"\n            hidden={\n              selectedToken.label === \"ERC721\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositERC721}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC721}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitERC721}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <label for=\"erc721-pos-inputValue\">\n              {Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                ? `tokenId for deposit or burn transaction hash to exit`\n                : `TokenId to burn`}\n            </label>\n            <input\n              id=\"erc721-pos-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"ERC1155\"\n            hidden={\n              selectedToken.label === \"ERC1155\" &&\n              selectedBridgeOption.label === \"Proof of Stake\"\n                ? false\n                : true\n            }\n          >\n            <button\n              onClick={depositERC1155}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC1155}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n\n            <button\n              onClick={exitERC1155}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n */}\n{/*             \n            <br />\n            <label for=\"erc1155-pos-tokenId\">\n              {Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                ? `tokenID for deposit or burn transaction hash for exit`\n                : `tokenId`}\n            </label>\n            <input\n              id=\"erc1155-pos-tokenId\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <br />\n            <label for=\"erc1155-pos-amount\">Amount</label>\n            <input\n              id=\"erc1155-pos-amount\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"amount\"\n              value={amount}\n              onChange={onamountchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n        </div>\n\n        <div\n          id=\"plasma\"\n          hidden={selectedBridgeOption.label === \"Plasma\" ? false : true}\n        >\n          <div\n            id=\"PlasmaEther\"\n            hidden={selectedToken.label === \"Ether\" ? false : true}\n          >\n            <button\n              onClick={depositEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n            <button\n              onClick={confirmWithdrawEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              Confirm Withdraw\n            </button>\n\n            <button\n              onClick={exitEtherPlasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <input\n              id=\"plasma-ether-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"PlasmaERC20\"\n            hidden={selectedToken.label === \"ERC20\" ? false : true}\n          >\n            <button\n              onClick={depositERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n            <button\n              onClick={confirmWithdrawERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              Confirm Withdraw\n            </button>\n\n            <button\n              onClick={exitERC20Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button>\n\n            <br />\n            <input\n              id=\"plasma-erc20-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n          <div\n            id=\"PlasmaERC721\"\n            hidden={selectedToken.label === \"ERC721\" ? false : true}\n          >\n            <button\n              onClick={depositERC721Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.ZKEVM_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              Deposit\n            </button>\n\n            <button\n              onClick={burnERC721Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? true\n                  : false\n              }\n            >\n              burn\n            </button>\n            <button\n              onClick={confirmWithdrawERC721Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              Confirm Withdraw\n            </button>\n\n            <button\n              onClick={exitERC721Plasma}\n              disabled={\n                Networkid !== 0 && Networkid === config.MUMBAI_CHAINID\n                  ? false\n                  : true\n              }\n            >\n              exit\n            </button> */}\n\n            <br />\n            <input\n              id=\"plasma-erc721-inputValue\"\n              type=\"text\"\n              placeholder=\"value\"\n              name=\"inputValue\"\n              value={inputValue}\n              onChange={onchange}\n              required\n            />\n            <p id=\"burnHash\">{burnHash}</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      <Navbar account={account} />\n      <div>\n        <select\n          onChange={(e) => {\n            setSelectedBridgeOption({ label: e.target.value });\n            if (e.target.value === \"Plasma\") {\n              setTokenTypes([\n                {\n                  label: \"Ether\",\n                  value: \"Ether\",\n                },\n                {\n                  label: \"ERC20\",\n                  value: \"ERC20\",\n                },\n                // {\n                //   label: \"ERC721\",\n                //   value: \"ERC721\",\n                // },\n              ]);\n            } else {\n              setTokenTypes([\n                {\n                  label: \"Ether\",\n                  value: \"Ether\",\n                },\n                {\n                  label: \"ERC20\",\n                  value: \"ERC20\",\n                },\n                // {\n                //   label: \"ERC721\",\n                //   value: \"ERC721\",\n                // },\n                // {\n                //   label: \"ERC1155\",\n                //   value: \"ERC1155\",\n                // },\n              ]);\n            }\n          }}\n        >\n          {bridgeOptions.map((item) => (\n            <option key={item.value} value={item.value}>\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div>\n        <select onChange={(e) => setSelectedToken({ label: e.target.value })}>\n          {tokenTypes.map((item) => (\n            <option key={item.value} value={item.value}>\n              {item.label}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      {content}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAOC,qBAAqB,MAAM,sCAAsC;AACxE,MAAMC,MAAM,GAAGC,OAAO,CAAC,aAAa,CAAC;AACrC,MAAMC,cAAc,GAAGD,OAAO,CAAC,uBAAuB,CAAC,CAACE,cAAc;AACtE;AACA;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAChBT,SAAS,CAAC,MAAM;IACdU,QAAQ,EAAE;IACVC,kBAAkB,EAAE;EACtB,CAAC,EAAE,EAAE,CAAC;EACN,IAAIC,OAAO;EACX,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EAC7C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACgB,OAAO,EAAEC,UAAU,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACkB,UAAU,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACjC;EACA,MAAM,CAACmB,QAAQ,EAAEC,WAAW,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACqB,aAAa,EAAEC,gBAAgB,CAAC,GAAGtB,QAAQ,EAAE;EACpD,MAAM,CAACuB,cAAc,EAAEC,iBAAiB,CAAC,GAAGxB,QAAQ,EAAE;EACtD,MAAM,CAACyB,aAAa,CAAC,GAAGzB,QAAQ,CAAC,CAC/B;IACE0B,KAAK,EAAE,gBAAgB;IACvBC,KAAK,EAAE;EACT;EACA;EACA;EACA;EACA;EAAA,CACD,CAAC;;EACF,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAG7B,QAAQ,CAAC,CAC3C;IACE0B,KAAK,EAAE,OAAO;IACdC,KAAK,EAAE;EACT,CAAC,EACD;IACED,KAAK,EAAE,OAAO;IACdC,KAAK,EAAE;EACT;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAAA,CACD,CAAC;;EACF,MAAM,CAACG,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG/B,QAAQ,CAAC;IAC/D0B,KAAK,EAAE;EACT,CAAC,CAAC;EACF,MAAM,CAACM,aAAa,EAAEC,gBAAgB,CAAC,GAAGjC,QAAQ,CAAC;IACjD0B,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAMjB,QAAQ,GAAG,YAAY;IAC3B,IAAIyB,MAAM,CAACC,QAAQ,EAAE;MACnBD,MAAM,CAACE,IAAI,GAAG,IAAInC,IAAI,CAACiC,MAAM,CAACC,QAAQ,CAAC;MACvC,MAAMD,MAAM,CAACC,QAAQ,CAACE,MAAM,EAAE;IAChC,CAAC,MAAM,IAAIH,MAAM,CAACE,IAAI,EAAE;MACtBF,MAAM,CAACE,IAAI,GAAG,IAAInC,IAAI,CAACiC,MAAM,CAACE,IAAI,CAACE,eAAe,CAAC;IACrD,CAAC,MAAM;MACLJ,MAAM,CAACK,KAAK,CACV,qEAAqE,CACtE;IACH;EACF,CAAC;EAED,MAAM7B,kBAAkB,GAAG,YAAY;IACrCO,UAAU,CAAC,IAAI,CAAC;IAChB,MAAMI,aAAa,GAAG,IAAIlB,qBAAqB,CAAC;MAC9CqC,IAAI,EAAEpC,MAAM,CAACqC,SAAS;MACtBC,SAAS,EAAE;QACTC,SAAS,EAAEC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;QACzCC,YAAY,EAAEF,OAAO,CAACC,GAAG,CAAC,qBAAqB;MACjD;IACF,CAAC,CAAC;IAEF,MAAMtB,cAAc,GAAG,IAAIpB,qBAAqB,CAAC;MAC/CqC,IAAI,EAAEpC,MAAM,CAAC2C,UAAU;MACvBL,SAAS,EAAE;QACTC,SAAS,EAAEC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;QAC1CC,YAAY,EAAEF,OAAO,CAACC,GAAG,CAAC,qBAAqB;MACjD;IACF,CAAC,CAAC;IAEFvB,gBAAgB,CAACD,aAAa,CAAC;IAC/BG,iBAAiB,CAACD,cAAc,CAAC;IACjC,MAAMa,IAAI,GAAGF,MAAM,CAACE,IAAI;IAExB,MAAMY,QAAQ,GAAG,MAAMZ,IAAI,CAACa,GAAG,CAACC,WAAW,EAAE;IAC7CnC,UAAU,CAACiC,QAAQ,CAAC,CAAC,CAAC,CAAC;IACvB,MAAMG,SAAS,GAAG,MAAMf,IAAI,CAACa,GAAG,CAACG,GAAG,CAACC,KAAK,EAAE;IAE5CxC,YAAY,CAACsC,SAAS,CAAC;IAEvB,IAAIA,SAAS,KAAK/C,MAAM,CAACkD,cAAc,EAAE;MACvCrC,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,MAAM,IAAIkC,SAAS,KAAK/C,MAAM,CAACmD,aAAa,EAAE;MAC7CtC,UAAU,CAAC,KAAK,CAAC;IACnB,CAAC,MAAM;MACLiB,MAAM,CAACK,KAAK,CAAC,4CAA4C,CAAC;IAC5D;EACF,CAAC;EACD;EACA,MAAMiB,eAAe,GAAG,MAAM;IAC5B,MAAMC,cAAc,GAAG,IAAInD,cAAc,CAAC;MACxCoD,OAAO,EAAEtD,MAAM,CAACuD,OAAO;MACvBC,OAAO,EAAExD,MAAM,CAACyD,OAAO;MACvBC,aAAa,EAAEzC,aAAa;MAC5B0C,cAAc,EAAE7B,MAAM,CAACE,IAAI;MAC3B4B,oBAAoB,EAAE;QAAEC,IAAI,EAAEnD;MAAQ,CAAC;MACvCoD,mBAAmB,EAAE;QAAED,IAAI,EAAEnD;MAAQ;IACvC,CAAC,CAAC;IACF,OAAO2C,cAAc;EACvB,CAAC;EACD;EACA,MAAMU,cAAc,GAAG,MAAM;IAC3B,MAAMV,cAAc,GAAG,IAAInD,cAAc,CAAC;MACxCoD,OAAO,EAAEtD,MAAM,CAACuD,OAAO;MACvBC,OAAO,EAAExD,MAAM,CAACyD,OAAO;MACvBC,aAAa,EAAE5B,MAAM,CAACE,IAAI;MAC1B2B,cAAc,EAAExC,cAAc;MAC9ByC,oBAAoB,EAAE;QAAEC,IAAI,EAAEnD;MAAQ,CAAC;MACvCoD,mBAAmB,EAAE;QAAED,IAAI,EAAEnD;MAAQ;IACvC,CAAC,CAAC;IACF,OAAO2C,cAAc;EACvB,CAAC;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA,MAAMW,YAAY,GAAG,YAAY;IAC/B,MAAMX,cAAc,GAAGD,eAAe,EAAE;IACxC,MAAMa,CAAC,GAAGnD,UAAU,GAAG,mBAAmB,CAAC,CAAC;IAC5C,MAAMoD,EAAE,GAAGD,CAAC,CAACE,QAAQ,EAAE;IAEvB,MAAMd,cAAc,CAACe,mBAAmB,CAAC1D,OAAO,EAAEwD,EAAE,EAAE;MACpDL,IAAI,EAAEnD;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAM2D,SAAS,GAAG,YAAY;IAC5B,MAAMhB,cAAc,GAAGU,cAAc,EAAE;IACvC,MAAME,CAAC,GAAGnD,UAAU,GAAG,mBAAmB;IAC1C,MAAMoD,EAAE,GAAGD,CAAC,CAACE,QAAQ,EAAE;IACvB,MAAMd,cAAc,CACjBiB,SAAS,CAACtE,MAAM,CAACuE,YAAY,EAAEL,EAAE,EAAE;MAClCL,IAAI,EAAEnD;IACR,CAAC,CAAC,CACD8D,IAAI,CAAEC,GAAG,IAAK;MACbjC,OAAO,CAACC,GAAG,CAACgC,GAAG,CAACC,eAAe,CAAC;MAChC1D,WAAW,CAACyD,GAAG,CAACC,eAAe,CAAC;IAClC,CAAC,CAAC;EACN,CAAC;EAED,MAAMC,SAAS,GAAG,YAAY;IAC5B,MAAMtB,cAAc,GAAGD,eAAe,EAAE;IACxC,MAAMC,cAAc,CACjBuB,SAAS,CAAC9D,UAAU,EAAE;MACrB+C,IAAI,EAAEnD;IACR,CAAC,CAAC,CACD8D,IAAI,CAAEC,GAAG,IAAK;MACbjC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEgC,GAAG,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC;;EAED;;EAEA,MAAMI,YAAY,GAAG,YAAY;IAC/B,MAAMxB,cAAc,GAAGD,eAAe,EAAE;IACxC,MAAMa,CAAC,GAAGnD,UAAU,GAAG,mBAAmB,CAAC,CAAC;IAC5C,MAAMoD,EAAE,GAAGD,CAAC,CAACE,QAAQ,EAAE;IACvB,MAAMd,cAAc,CAACyB,sBAAsB,CAAC9E,MAAM,CAAC+E,YAAY,EAAEb,EAAE,EAAE;MACnEL,IAAI,EAAEnD;IACR,CAAC,CAAC;IACF,MAAM2C,cAAc,CAAC2B,mBAAmB,CAAChF,MAAM,CAAC+E,YAAY,EAAErE,OAAO,EAAEwD,EAAE,EAAE;MACzEL,IAAI,EAAEnD;IACR,CAAC,CAAC;EACJ,CAAC;EAED,MAAM4D,SAAS,GAAG,YAAY;IAC5B,MAAMjB,cAAc,GAAGU,cAAc,EAAE;IACvC,MAAME,CAAC,GAAGnD,UAAU,GAAG,mBAAmB;IAC1C,MAAMoD,EAAE,GAAGD,CAAC,CAACE,QAAQ,EAAE;IACvB,MAAMd,cAAc,CACjBiB,SAAS,CAACtE,MAAM,CAACiF,aAAa,EAAEf,EAAE,EAAE;MACnCL,IAAI,EAAEnD;IACR,CAAC,CAAC,CACD8D,IAAI,CAAEC,GAAG,IAAK;MACbzD,WAAW,CAACyD,GAAG,CAACC,eAAe,CAAC;IAClC,CAAC,CAAC;EACN,CAAC;EAED,MAAME,SAAS,GAAG,YAAY;IAC5B,MAAMvB,cAAc,GAAGD,eAAe,EAAE;IACxC,MAAMC,cAAc,CACjBuB,SAAS,CAAC9D,UAAU,EAAE;MACrB+C,IAAI,EAAEnD;IACR,CAAC,CAAC,CACD8D,IAAI,CAAEC,GAAG,IAAK;MACbjC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEgC,GAAG,CAAC;IAC9B,CAAC,CAAC;EACN,CAAC;;EAED;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAI7D,OAAO,KAAK,IAAI,EAAE,CACtB,CAAC,MAAM;IACLL,OAAO,gBACL;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBACE;MACE,EAAE,EAAC,KAAK;MACR,MAAM,EACJmB,oBAAoB,CAACJ,KAAK,KAAK,gBAAgB,GAAG,KAAK,GAAG,IAC3D;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAED;MACE,EAAE,EAAC,OAAO;MACV,MAAM,EACJM,aAAa,CAACN,KAAK,KAAK,OAAO,IAC/BI,oBAAoB,CAACJ,KAAK,KAAK,gBAAgB,GAC3C,KAAK,GACL,IACL;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,gBAED;MACE,OAAO,EAAE0C,YAAa;MACtB,QAAQ,EACNxD,SAAS,KAAK,CAAC,IAAIA,SAAS,KAAKR,MAAM,CAACmD,aAAa,GACjD,IAAI,GACJ,KACL;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,aAGM,eAET;MACE,OAAO,EAAEkB,SAAU;MACnB,QAAQ,EACN7D,SAAS,KAAK,CAAC,IAAIA,SAAS,KAAKR,MAAM,CAACkD,cAAc,GAClD,IAAI,GACJ,KACL;MAAA;MAA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"},"metadata":{},"sourceType":"module"}